#ifndef IFC2X3_IFCOWNERHISTORY_H_INCLUDED
#define IFC2X3_IFCOWNERHISTORY_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcPersonAndOrganization.h"
#include "IfcApplication.h"
#include "IfcPersonAndOrganization.h"
#include "IfcApplication.h"

namespace ifc2x3
{
   class IfcOwnerHistory : public ifc::Entity
   {
   public:
      virtual ~IfcOwnerHistory(){}

      IfcOwnerHistory() = default;

      IfcOwnerHistory(IfcPersonAndOrganization* _OwningUser, IfcApplication* _OwningApplication, const IfcChangeActionEnum& _ChangeAction, const IfcTimeStamp& _CreationDate)
         : ifc::Entity(), OwningUser(_OwningUser), OwningApplication(_OwningApplication), ChangeAction(_ChangeAction), CreationDate(_CreationDate) {}

      virtual std::string name() const { return "IfcOwnerHistory"; }

      IfcPersonAndOrganization* OwningUser; // required parameter
      IfcApplication* OwningApplication; // required parameter
      boost::optional<IfcStateEnum> State; // optional parameter
      boost::optional<IfcChangeActionEnum> ChangeAction; // required parameter
      boost::optional<IfcTimeStamp> LastModifiedDate; // optional parameter
      IfcPersonAndOrganization* LastModifyingUser; // optional parameter
      IfcApplication* LastModifyingApplication; // optional parameter
      boost::optional<IfcTimeStamp> CreationDate; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(OwningUser);
         w.writeAttributeInstance(OwningApplication);
         w.writeAttributeValueEnumeration(IfcStateEnumStringMap, State);
         w.writeAttributeValueEnumeration(IfcChangeActionEnumStringMap, ChangeAction);
         w.writeAttributeValueScalar(LastModifiedDate);
         w.writeAttributeInstance(LastModifyingUser);
         w.writeAttributeInstance(LastModifyingApplication);
         w.writeAttributeValueScalar(CreationDate);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
