// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcPropertySetDefinition.h"
#include "IfcMeasureValue.h"
#include "IfcMeasureValue.h"
#include "IfcMeasureValue.h"

namespace ifc2x3
{
   class IfcServiceLifeFactor : public IfcPropertySetDefinition
   {
   public:
      virtual ~IfcServiceLifeFactor(){}

      explicit IfcServiceLifeFactor() = default;

      explicit IfcServiceLifeFactor(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcServiceLifeFactorTypeEnum& _PredefinedType, const IfcMeasureValue& _MostUsedValue)
         : IfcPropertySetDefinition(_GlobalId, _OwnerHistory), PredefinedType(_PredefinedType), MostUsedValue(_MostUsedValue) {}

      virtual std::string className() const { return "IfcServiceLifeFactor"; }

      boost::optional<IfcServiceLifeFactorTypeEnum> PredefinedType; // required parameter
      boost::optional<IfcMeasureValue> UpperValue; // optional parameter
      boost::optional<IfcMeasureValue> MostUsedValue; // required parameter
      boost::optional<IfcMeasureValue> LowerValue; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IfcServiceLifeFactorTypeEnumStringMap, PredefinedType);
         w.writeAttributeSelect<IfcMeasureValueWriterVisitor>(UpperValue);
         w.writeAttributeSelect<IfcMeasureValueWriterVisitor>(MostUsedValue);
         w.writeAttributeSelect<IfcMeasureValueWriterVisitor>(LowerValue);
         w.endEntity();
      }

   };

} // namespace ifc2x3

