#ifndef IFC2X3_IFCPERMEABLECOVERINGPROPERTIES_H_INCLUDED
#define IFC2X3_IFCPERMEABLECOVERINGPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcPropertySetDefinition.h"
#include "IfcShapeAspect.h"

namespace ifc2x3
{
   class IfcPermeableCoveringProperties : public IfcPropertySetDefinition
   {
   public:
      virtual ~IfcPermeableCoveringProperties(){}

      IfcPermeableCoveringProperties() = default;

      IfcPermeableCoveringProperties(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcPermeableCoveringOperationEnum& _OperationType, const IfcWindowPanelPositionEnum& _PanelPosition)
         : IfcPropertySetDefinition(_GlobalId, _OwnerHistory), OperationType(_OperationType), PanelPosition(_PanelPosition) {}

      virtual std::string name() const { return "IfcPermeableCoveringProperties"; }

      boost::optional<IfcPermeableCoveringOperationEnum> OperationType; // required parameter
      boost::optional<IfcWindowPanelPositionEnum> PanelPosition; // required parameter
      boost::optional<IfcPositiveLengthMeasure> FrameDepth; // optional parameter
      boost::optional<IfcPositiveLengthMeasure> FrameThickness; // optional parameter
      IfcShapeAspect* ShapeAspectStyle; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueEnumeration(IfcPermeableCoveringOperationEnumStringMap, OperationType);
         w.writeAttributeValueEnumeration(IfcWindowPanelPositionEnumStringMap, PanelPosition);
         w.writeAttributeValueScalar(FrameDepth);
         w.writeAttributeValueScalar(FrameThickness);
         w.writeAttributeInstance(ShapeAspectStyle);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
