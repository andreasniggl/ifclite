// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"

namespace ifc2x3
{
   class IfcScheduleTimeControl : public IfcControl
   {
   public:
      virtual ~IfcScheduleTimeControl(){}

      explicit IfcScheduleTimeControl() = default;

      explicit IfcScheduleTimeControl(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory)
         : IfcControl(_GlobalId, _OwnerHistory) {}

      virtual std::string className() const { return "IfcScheduleTimeControl"; }

      boost::optional<IfcDateTimeSelect> ActualStart; // optional parameter
      boost::optional<IfcDateTimeSelect> EarlyStart; // optional parameter
      boost::optional<IfcDateTimeSelect> LateStart; // optional parameter
      boost::optional<IfcDateTimeSelect> ScheduleStart; // optional parameter
      boost::optional<IfcDateTimeSelect> ActualFinish; // optional parameter
      boost::optional<IfcDateTimeSelect> EarlyFinish; // optional parameter
      boost::optional<IfcDateTimeSelect> LateFinish; // optional parameter
      boost::optional<IfcDateTimeSelect> ScheduleFinish; // optional parameter
      boost::optional<IfcTimeMeasure> ScheduleDuration; // optional parameter
      boost::optional<IfcTimeMeasure> ActualDuration; // optional parameter
      boost::optional<IfcTimeMeasure> RemainingTime; // optional parameter
      boost::optional<IfcTimeMeasure> FreeFloat; // optional parameter
      boost::optional<IfcTimeMeasure> TotalFloat; // optional parameter
      boost::optional<bool> IsCritical; // optional parameter
      boost::optional<IfcDateTimeSelect> StatusTime; // optional parameter
      boost::optional<IfcTimeMeasure> StartFloat; // optional parameter
      boost::optional<IfcTimeMeasure> FinishFloat; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> Completion; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(ActualStart);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(EarlyStart);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(LateStart);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(ScheduleStart);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(ActualFinish);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(EarlyFinish);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(LateFinish);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(ScheduleFinish);
         w.writeAttributeValue(ScheduleDuration);
         w.writeAttributeValue(ActualDuration);
         w.writeAttributeValue(RemainingTime);
         w.writeAttributeValue(FreeFloat);
         w.writeAttributeValue(TotalFloat);
         w.writeAttributeValue(IsCritical);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(StatusTime);
         w.writeAttributeValue(StartFloat);
         w.writeAttributeValue(FinishFloat);
         w.writeAttributeValue(Completion);
         w.endEntity();
      }

   };

} // namespace ifc2x3

