#ifndef IFC2X3_IFCTIMESERIES_H_INCLUDED
#define IFC2X3_IFCTIMESERIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcDateTimeSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcUnit.h"

namespace ifc2x3
{
   class IfcTimeSeries : public ifc::Entity
   {
   public:
      virtual ~IfcTimeSeries(){}

      IfcTimeSeries() = default;

      IfcTimeSeries(const IfcLabel& _Name, const IfcDateTimeSelect& _StartTime, const IfcDateTimeSelect& _EndTime, const IfcTimeSeriesDataTypeEnum& _TimeSeriesDataType, const IfcDataOriginEnum& _DataOrigin)
         : ifc::Entity(), Name(_Name), StartTime(_StartTime), EndTime(_EndTime), TimeSeriesDataType(_TimeSeriesDataType), DataOrigin(_DataOrigin) {}

      virtual std::string name() const { return "IfcTimeSeries"; }

      boost::optional<IfcLabel> Name; // required parameter
      boost::optional<IfcText> Description; // optional parameter
      boost::optional<IfcDateTimeSelect> StartTime; // required parameter
      boost::optional<IfcDateTimeSelect> EndTime; // required parameter
      boost::optional<IfcTimeSeriesDataTypeEnum> TimeSeriesDataType; // required parameter
      boost::optional<IfcDataOriginEnum> DataOrigin; // required parameter
      boost::optional<IfcLabel> UserDefinedDataOrigin; // optional parameter
      boost::optional<IfcUnit> Unit; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(StartTime);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(EndTime);
         w.writeAttributeValueEnumeration(IfcTimeSeriesDataTypeEnumStringMap, TimeSeriesDataType);
         w.writeAttributeValueEnumeration(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValueScalar(UserDefinedDataOrigin);
         w.writeAttributeSelect<IfcUnitWriterVisitor>(Unit);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
