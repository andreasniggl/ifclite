#ifndef IFC2X3_IFCLIGHTSOURCEPOSITIONAL_H_INCLUDED
#define IFC2X3_IFCLIGHTSOURCEPOSITIONAL_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcLightSource.h"
#include "IfcCartesianPoint.h"

namespace ifc2x3
{
   class IfcLightSourcePositional : public IfcLightSource
   {
   public:
      virtual ~IfcLightSourcePositional(){}

      IfcLightSourcePositional() = default;

      IfcLightSourcePositional(IfcColourRgb* _LightColour, IfcCartesianPoint* _Position, const IfcPositiveLengthMeasure& _Radius, const IfcReal& _ConstantAttenuation, const IfcReal& _DistanceAttenuation, const IfcReal& _QuadricAttenuation)
         : IfcLightSource(_LightColour), Position(_Position), Radius(_Radius), ConstantAttenuation(_ConstantAttenuation), DistanceAttenuation(_DistanceAttenuation), QuadricAttenuation(_QuadricAttenuation) {}

      virtual std::string name() const { return "IfcLightSourcePositional"; }

      IfcCartesianPoint* Position; // required parameter
      boost::optional<IfcPositiveLengthMeasure> Radius; // required parameter
      boost::optional<IfcReal> ConstantAttenuation; // required parameter
      boost::optional<IfcReal> DistanceAttenuation; // required parameter
      boost::optional<IfcReal> QuadricAttenuation; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeInstance(LightColour);
         w.writeAttributeValueScalar(AmbientIntensity);
         w.writeAttributeValueScalar(Intensity);
         w.writeAttributeInstance(Position);
         w.writeAttributeValueScalar(Radius);
         w.writeAttributeValueScalar(ConstantAttenuation);
         w.writeAttributeValueScalar(DistanceAttenuation);
         w.writeAttributeValueScalar(QuadricAttenuation);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
