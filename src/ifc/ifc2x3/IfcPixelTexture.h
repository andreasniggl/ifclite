#ifndef IFC2X3_IFCPIXELTEXTURE_H_INCLUDED
#define IFC2X3_IFCPIXELTEXTURE_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcSurfaceTexture.h"

namespace ifc2x3
{
   class IfcPixelTexture : public IfcSurfaceTexture
   {
   public:
      virtual ~IfcPixelTexture(){}

      IfcPixelTexture() = default;

      IfcPixelTexture(const bool& _RepeatS, const bool& _RepeatT, const IfcSurfaceTextureEnum& _TextureType, const IfcInteger& _Width, const IfcInteger& _Height, const IfcInteger& _ColourComponents, const std::vector<BINARY>& _Pixel)
         : IfcSurfaceTexture(_RepeatS, _RepeatT, _TextureType), Width(_Width), Height(_Height), ColourComponents(_ColourComponents), Pixel(_Pixel) {}

      virtual std::string name() const { return "IfcPixelTexture"; }

      boost::optional<IfcInteger> Width; // required parameter
      boost::optional<IfcInteger> Height; // required parameter
      boost::optional<IfcInteger> ColourComponents; // required parameter
      std::vector<BINARY> Pixel; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(RepeatS);
         w.writeAttributeValueScalar(RepeatT);
         w.writeAttributeValueEnumeration(IfcSurfaceTextureEnumStringMap, TextureType);
         w.writeAttributeInstance(TextureTransform);
         w.writeAttributeValueScalar(Width);
         w.writeAttributeValueScalar(Height);
         w.writeAttributeValueScalar(ColourComponents);
         w.writeAttributeValueList(Pixel);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
