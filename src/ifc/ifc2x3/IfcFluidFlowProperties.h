// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcPropertySetDefinition.h"
#include "IfcTimeSeries.h"
#include "IfcTimeSeries.h"
#include "IfcTimeSeries.h"
#include "IfcMaterial.h"
#include "IfcTimeSeries.h"
#include "IfcTimeSeries.h"
#include "IfcTimeSeries.h"
#include "IfcDerivedMeasureValue.h"

namespace ifc2x3
{
   class IfcFluidFlowProperties : public IfcPropertySetDefinition
   {
   public:
      virtual ~IfcFluidFlowProperties(){}

      explicit IfcFluidFlowProperties() = default;

      explicit IfcFluidFlowProperties(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcPropertySourceEnum& _PropertySource, IfcMaterial* _Fluid)
         : IfcPropertySetDefinition(_GlobalId, _OwnerHistory), PropertySource(_PropertySource), Fluid(_Fluid) {}

      virtual std::string className() const { return "IfcFluidFlowProperties"; }

      boost::optional<IfcPropertySourceEnum> PropertySource; // required parameter
      IfcTimeSeries* FlowConditionTimeSeries; // optional parameter
      IfcTimeSeries* VelocityTimeSeries; // optional parameter
      IfcTimeSeries* FlowrateTimeSeries; // optional parameter
      IfcMaterial* Fluid; // required parameter
      IfcTimeSeries* PressureTimeSeries; // optional parameter
      boost::optional<IfcLabel> UserDefinedPropertySource; // optional parameter
      boost::optional<IfcThermodynamicTemperatureMeasure> TemperatureSingleValue; // optional parameter
      boost::optional<IfcThermodynamicTemperatureMeasure> WetBulbTemperatureSingleValue; // optional parameter
      IfcTimeSeries* WetBulbTemperatureTimeSeries; // optional parameter
      IfcTimeSeries* TemperatureTimeSeries; // optional parameter
      boost::optional<IfcDerivedMeasureValue> FlowrateSingleValue; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> FlowConditionSingleValue; // optional parameter
      boost::optional<IfcLinearVelocityMeasure> VelocitySingleValue; // optional parameter
      boost::optional<IfcPressureMeasure> PressureSingleValue; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IfcPropertySourceEnumStringMap, PropertySource);
         w.writeAttributeInstance(FlowConditionTimeSeries);
         w.writeAttributeInstance(VelocityTimeSeries);
         w.writeAttributeInstance(FlowrateTimeSeries);
         w.writeAttributeInstance(Fluid);
         w.writeAttributeInstance(PressureTimeSeries);
         w.writeAttributeValue(UserDefinedPropertySource);
         w.writeAttributeValue(TemperatureSingleValue);
         w.writeAttributeValue(WetBulbTemperatureSingleValue);
         w.writeAttributeInstance(WetBulbTemperatureTimeSeries);
         w.writeAttributeInstance(TemperatureTimeSeries);
         w.writeAttributeSelect<IfcDerivedMeasureValueWriterVisitor>(FlowrateSingleValue);
         w.writeAttributeValue(FlowConditionSingleValue);
         w.writeAttributeValue(VelocitySingleValue);
         w.writeAttributeValue(PressureSingleValue);
         w.endEntity();
      }

   };

} // namespace ifc2x3

