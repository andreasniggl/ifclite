#ifndef IFC2X3_IFCTIMESERIESSCHEDULE_H_INCLUDED
#define IFC2X3_IFCTIMESERIESSCHEDULE_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcDateTimeSelect.h"
#include "IfcTimeSeries.h"

namespace ifc2x3
{
   class IfcTimeSeriesSchedule : public IfcControl
   {
   public:
      virtual ~IfcTimeSeriesSchedule(){}

      IfcTimeSeriesSchedule() = default;

      IfcTimeSeriesSchedule(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcTimeSeriesScheduleTypeEnum& _TimeSeriesScheduleType, IfcTimeSeries* _TimeSeries)
         : IfcControl(_GlobalId, _OwnerHistory), TimeSeriesScheduleType(_TimeSeriesScheduleType), TimeSeries(_TimeSeries) {}

      virtual std::string name() const { return "IfcTimeSeriesSchedule"; }

      std::vector<boost::optional<IfcDateTimeSelect>> ApplicableDates; // optional parameter
      boost::optional<IfcTimeSeriesScheduleTypeEnum> TimeSeriesScheduleType; // required parameter
      IfcTimeSeries* TimeSeries; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(ObjectType);
         w.writeAttributeSelectList<IfcDateTimeSelectWriterVisitor>(ApplicableDates);
         w.writeAttributeValueEnumeration(IfcTimeSeriesScheduleTypeEnumStringMap, TimeSeriesScheduleType);
         w.writeAttributeInstance(TimeSeries);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
