// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"

namespace ifc2x3
{
   class IfcServiceLife : public IfcControl
   {
   public:
      virtual ~IfcServiceLife(){}

      explicit IfcServiceLife() = default;

      explicit IfcServiceLife(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcServiceLifeTypeEnum& _ServiceLifeType, const IfcTimeMeasure& _ServiceLifeDuration)
         : IfcControl(_GlobalId, _OwnerHistory), ServiceLifeType(_ServiceLifeType), ServiceLifeDuration(_ServiceLifeDuration) {}

      virtual std::string className() const { return "IfcServiceLife"; }

      boost::optional<IfcServiceLifeTypeEnum> ServiceLifeType; // required parameter
      boost::optional<IfcTimeMeasure> ServiceLifeDuration; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(IfcServiceLifeTypeEnumStringMap, ServiceLifeType);
         w.writeAttributeValue(ServiceLifeDuration);
         w.endEntity();
      }

   };

} // namespace ifc2x3

