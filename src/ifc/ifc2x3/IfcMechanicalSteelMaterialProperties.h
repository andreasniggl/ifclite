#ifndef IFC2X3_IFCMECHANICALSTEELMATERIALPROPERTIES_H_INCLUDED
#define IFC2X3_IFCMECHANICALSTEELMATERIALPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcMechanicalMaterialProperties.h"
#include "IfcRelaxation.h"

namespace ifc2x3
{
   class IfcMechanicalSteelMaterialProperties : public IfcMechanicalMaterialProperties
   {
   public:
      virtual ~IfcMechanicalSteelMaterialProperties(){}

      IfcMechanicalSteelMaterialProperties() = default;

      IfcMechanicalSteelMaterialProperties(IfcMaterial* _Material)
         : IfcMechanicalMaterialProperties(_Material) {}

      virtual std::string name() const { return "IfcMechanicalSteelMaterialProperties"; }

      boost::optional<IfcPressureMeasure> YieldStress; // optional parameter
      boost::optional<IfcPressureMeasure> UltimateStress; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> UltimateStrain; // optional parameter
      boost::optional<IfcModulusOfElasticityMeasure> HardeningModule; // optional parameter
      boost::optional<IfcPressureMeasure> ProportionalStress; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> PlasticStrain; // optional parameter
      std::vector<IfcRelaxation*> Relaxations; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(Material);
         w.writeAttributeValueScalar(DynamicViscosity);
         w.writeAttributeValueScalar(YoungModulus);
         w.writeAttributeValueScalar(ShearModulus);
         w.writeAttributeValueScalar(PoissonRatio);
         w.writeAttributeValueScalar(ThermalExpansionCoefficient);
         w.writeAttributeValueScalar(YieldStress);
         w.writeAttributeValueScalar(UltimateStress);
         w.writeAttributeValueScalar(UltimateStrain);
         w.writeAttributeValueScalar(HardeningModule);
         w.writeAttributeValueScalar(ProportionalStress);
         w.writeAttributeValueScalar(PlasticStrain);
         w.writeAttributeInstanceList(Relaxations);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
