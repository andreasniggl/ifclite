// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcProcess.h"

namespace ifc2x3
{
   class IfcProcedure : public IfcProcess
   {
   public:
      virtual ~IfcProcedure(){}

      explicit IfcProcedure() = default;

      explicit IfcProcedure(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcIdentifier& _ProcedureID, const IfcProcedureTypeEnum& _ProcedureType)
         : IfcProcess(_GlobalId, _OwnerHistory), ProcedureID(_ProcedureID), ProcedureType(_ProcedureType) {}

      virtual std::string className() const { return "IfcProcedure"; }

      boost::optional<IfcIdentifier> ProcedureID; // required parameter
      boost::optional<IfcProcedureTypeEnum> ProcedureType; // required parameter
      boost::optional<IfcLabel> UserDefinedProcedureType; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(ProcedureID);
         w.writeAttributeValue(IfcProcedureTypeEnumStringMap, ProcedureType);
         w.writeAttributeValue(UserDefinedProcedureType);
         w.endEntity();
      }

   };

} // namespace ifc2x3

