// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcAppliedValue.h"
#include "IfcAppliedValue.h"

namespace ifc2x3
{
   class IfcAppliedValueRelationship : public ifc::Entity
   {
   public:
      virtual ~IfcAppliedValueRelationship(){}

      explicit IfcAppliedValueRelationship() = default;

      explicit IfcAppliedValueRelationship(IfcAppliedValue* _ComponentOfTotal, const std::vector<IfcAppliedValue*>& _Components, const IfcArithmeticOperatorEnum& _ArithmeticOperator)
         : ifc::Entity(), ComponentOfTotal(_ComponentOfTotal), Components(_Components), ArithmeticOperator(_ArithmeticOperator) {}

      virtual std::string className() const { return "IfcAppliedValueRelationship"; }

      IfcAppliedValue* ComponentOfTotal; // required parameter
      std::vector<IfcAppliedValue*> Components; // required parameter
      boost::optional<IfcArithmeticOperatorEnum> ArithmeticOperator; // required parameter
      boost::optional<IfcLabel> Name; // optional parameter
      boost::optional<IfcText> Description; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(ComponentOfTotal);
         w.writeAttributeInstance(Components);
         w.writeAttributeValue(IfcArithmeticOperatorEnumStringMap, ArithmeticOperator);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.endEntity();
      }

   };

} // namespace ifc2x3

