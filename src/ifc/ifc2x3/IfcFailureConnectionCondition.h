// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcStructuralConnectionCondition.h"

namespace ifc2x3
{
   class IfcFailureConnectionCondition : public IfcStructuralConnectionCondition
   {
   public:
      virtual ~IfcFailureConnectionCondition(){}

      explicit IfcFailureConnectionCondition() = default;

      virtual std::string className() const { return "IfcFailureConnectionCondition"; }

      boost::optional<IfcForceMeasure> TensionFailureX; // optional parameter
      boost::optional<IfcForceMeasure> TensionFailureY; // optional parameter
      boost::optional<IfcForceMeasure> TensionFailureZ; // optional parameter
      boost::optional<IfcForceMeasure> CompressionFailureX; // optional parameter
      boost::optional<IfcForceMeasure> CompressionFailureY; // optional parameter
      boost::optional<IfcForceMeasure> CompressionFailureZ; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(TensionFailureX);
         w.writeAttributeValue(TensionFailureY);
         w.writeAttributeValue(TensionFailureZ);
         w.writeAttributeValue(CompressionFailureX);
         w.writeAttributeValue(CompressionFailureY);
         w.writeAttributeValue(CompressionFailureZ);
         w.endEntity();
      }

   };

} // namespace ifc2x3

