#ifndef IFC2X3_IFCOPTICALMATERIALPROPERTIES_H_INCLUDED
#define IFC2X3_IFCOPTICALMATERIALPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcMaterialProperties.h"

namespace ifc2x3
{
   class IfcOpticalMaterialProperties : public IfcMaterialProperties
   {
   public:
      virtual ~IfcOpticalMaterialProperties(){}

      IfcOpticalMaterialProperties() = default;

      IfcOpticalMaterialProperties(IfcMaterial* _Material)
         : IfcMaterialProperties(_Material) {}

      virtual std::string name() const { return "IfcOpticalMaterialProperties"; }

      boost::optional<IfcPositiveRatioMeasure> VisibleTransmittance; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> SolarTransmittance; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> ThermalIrTransmittance; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> ThermalIrEmissivityBack; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> ThermalIrEmissivityFront; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> VisibleReflectanceBack; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> VisibleReflectanceFront; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> SolarReflectanceFront; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> SolarReflectanceBack; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(Material);
         w.writeAttributeValueScalar(VisibleTransmittance);
         w.writeAttributeValueScalar(SolarTransmittance);
         w.writeAttributeValueScalar(ThermalIrTransmittance);
         w.writeAttributeValueScalar(ThermalIrEmissivityBack);
         w.writeAttributeValueScalar(ThermalIrEmissivityFront);
         w.writeAttributeValueScalar(VisibleReflectanceBack);
         w.writeAttributeValueScalar(VisibleReflectanceFront);
         w.writeAttributeValueScalar(SolarReflectanceFront);
         w.writeAttributeValueScalar(SolarReflectanceBack);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
