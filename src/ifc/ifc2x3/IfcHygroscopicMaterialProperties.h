#ifndef IFC2X3_IFCHYGROSCOPICMATERIALPROPERTIES_H_INCLUDED
#define IFC2X3_IFCHYGROSCOPICMATERIALPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcMaterialProperties.h"

namespace ifc2x3
{
   class IfcHygroscopicMaterialProperties : public IfcMaterialProperties
   {
   public:
      virtual ~IfcHygroscopicMaterialProperties(){}

      IfcHygroscopicMaterialProperties() = default;

      IfcHygroscopicMaterialProperties(IfcMaterial* _Material)
         : IfcMaterialProperties(_Material) {}

      virtual std::string name() const { return "IfcHygroscopicMaterialProperties"; }

      boost::optional<IfcPositiveRatioMeasure> UpperVaporResistanceFactor; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> LowerVaporResistanceFactor; // optional parameter
      boost::optional<IfcIsothermalMoistureCapacityMeasure> IsothermalMoistureCapacity; // optional parameter
      boost::optional<IfcVaporPermeabilityMeasure> VaporPermeability; // optional parameter
      boost::optional<IfcMoistureDiffusivityMeasure> MoistureDiffusivity; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(Material);
         w.writeAttributeValueScalar(UpperVaporResistanceFactor);
         w.writeAttributeValueScalar(LowerVaporResistanceFactor);
         w.writeAttributeValueScalar(IsothermalMoistureCapacity);
         w.writeAttributeValueScalar(VaporPermeability);
         w.writeAttributeValueScalar(MoistureDiffusivity);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
