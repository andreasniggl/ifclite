// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcDocumentReference.h"
#include "IfcActorSelect.h"
#include "IfcActorSelect.h"
#include "IfcDateAndTime.h"
#include "IfcDateAndTime.h"
#include "IfcDocumentElectronicFormat.h"
#include "IfcCalendarDate.h"
#include "IfcCalendarDate.h"

namespace ifc2x3
{
   class IfcDocumentInformation : public ifc::Entity
   {
   public:
      virtual ~IfcDocumentInformation(){}

      explicit IfcDocumentInformation() = default;

      explicit IfcDocumentInformation(const IfcIdentifier& _DocumentId, const IfcLabel& _Name)
         : ifc::Entity(), DocumentId(_DocumentId), Name(_Name) {}

      virtual std::string className() const { return "IfcDocumentInformation"; }

      boost::optional<IfcIdentifier> DocumentId; // required parameter
      boost::optional<IfcLabel> Name; // required parameter
      boost::optional<IfcText> Description; // optional parameter
      std::vector<IfcDocumentReference*> DocumentReferences; // optional parameter
      boost::optional<IfcText> Purpose; // optional parameter
      boost::optional<IfcText> IntendedUse; // optional parameter
      boost::optional<IfcText> Scope; // optional parameter
      boost::optional<IfcLabel> Revision; // optional parameter
      boost::optional<IfcActorSelect> DocumentOwner; // optional parameter
      std::vector< boost::optional<IfcActorSelect> > Editors; // optional parameter
      IfcDateAndTime* CreationTime; // optional parameter
      IfcDateAndTime* LastRevisionTime; // optional parameter
      IfcDocumentElectronicFormat* ElectronicFormat; // optional parameter
      IfcCalendarDate* ValidFrom; // optional parameter
      IfcCalendarDate* ValidUntil; // optional parameter
      boost::optional<IfcDocumentConfidentialityEnum> Confidentiality; // optional parameter
      boost::optional<IfcDocumentStatusEnum> Status; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(DocumentId);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeInstance(DocumentReferences);
         w.writeAttributeValue(Purpose);
         w.writeAttributeValue(IntendedUse);
         w.writeAttributeValue(Scope);
         w.writeAttributeValue(Revision);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(DocumentOwner);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(Editors);
         w.writeAttributeInstance(CreationTime);
         w.writeAttributeInstance(LastRevisionTime);
         w.writeAttributeInstance(ElectronicFormat);
         w.writeAttributeInstance(ValidFrom);
         w.writeAttributeInstance(ValidUntil);
         w.writeAttributeValue(IfcDocumentConfidentialityEnumStringMap, Confidentiality);
         w.writeAttributeValue(IfcDocumentStatusEnumStringMap, Status);
         w.endEntity();
      }

   };

} // namespace ifc2x3

