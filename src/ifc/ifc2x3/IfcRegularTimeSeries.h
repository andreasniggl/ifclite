#ifndef IFC2X3_IFCREGULARTIMESERIES_H_INCLUDED
#define IFC2X3_IFCREGULARTIMESERIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcTimeSeries.h"
#include "IfcTimeSeriesValue.h"

namespace ifc2x3
{
   class IfcRegularTimeSeries : public IfcTimeSeries
   {
   public:
      virtual ~IfcRegularTimeSeries(){}

      IfcRegularTimeSeries() = default;

      IfcRegularTimeSeries(const IfcLabel& _Name, const IfcDateTimeSelect& _StartTime, const IfcDateTimeSelect& _EndTime, const IfcTimeSeriesDataTypeEnum& _TimeSeriesDataType, const IfcDataOriginEnum& _DataOrigin, const IfcTimeMeasure& _TimeStep, const std::vector<IfcTimeSeriesValue*>& _Values)
         : IfcTimeSeries(_Name, _StartTime, _EndTime, _TimeSeriesDataType, _DataOrigin), TimeStep(_TimeStep), Values(_Values) {}

      virtual std::string name() const { return "IfcRegularTimeSeries"; }

      boost::optional<IfcTimeMeasure> TimeStep; // required parameter
      std::vector<IfcTimeSeriesValue*> Values; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(StartTime);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(EndTime);
         w.writeAttributeValueEnumeration(IfcTimeSeriesDataTypeEnumStringMap, TimeSeriesDataType);
         w.writeAttributeValueEnumeration(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValueScalar(UserDefinedDataOrigin);
         w.writeAttributeSelect<IfcUnitWriterVisitor>(Unit);
         w.writeAttributeValueScalar(TimeStep);
         w.writeAttributeInstanceList(Values);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
