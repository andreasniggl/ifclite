#ifndef IFC2X3_IFCCURRENCYRELATIONSHIP_H_INCLUDED
#define IFC2X3_IFCCURRENCYRELATIONSHIP_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcMonetaryUnit.h"
#include "IfcMonetaryUnit.h"
#include "IfcDateAndTime.h"
#include "IfcLibraryInformation.h"

namespace ifc2x3
{
   class IfcCurrencyRelationship : public ifc::Entity
   {
   public:
      virtual ~IfcCurrencyRelationship(){}

      IfcCurrencyRelationship() = default;

      IfcCurrencyRelationship(IfcMonetaryUnit* _RelatingMonetaryUnit, IfcMonetaryUnit* _RelatedMonetaryUnit, const IfcPositiveRatioMeasure& _ExchangeRate, IfcDateAndTime* _RateDateTime)
         : ifc::Entity(), RelatingMonetaryUnit(_RelatingMonetaryUnit), RelatedMonetaryUnit(_RelatedMonetaryUnit), ExchangeRate(_ExchangeRate), RateDateTime(_RateDateTime) {}

      virtual std::string name() const { return "IfcCurrencyRelationship"; }

      IfcMonetaryUnit* RelatingMonetaryUnit; // required parameter
      IfcMonetaryUnit* RelatedMonetaryUnit; // required parameter
      boost::optional<IfcPositiveRatioMeasure> ExchangeRate; // required parameter
      IfcDateAndTime* RateDateTime; // required parameter
      IfcLibraryInformation* RateSource; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(RelatingMonetaryUnit);
         w.writeAttributeInstance(RelatedMonetaryUnit);
         w.writeAttributeValueScalar(ExchangeRate);
         w.writeAttributeInstance(RateDateTime);
         w.writeAttributeInstance(RateSource);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
