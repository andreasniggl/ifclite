#ifndef IFC2X3_IFCMOVE_H_INCLUDED
#define IFC2X3_IFCMOVE_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcTask.h"
#include "IfcSpatialStructureElement.h"
#include "IfcSpatialStructureElement.h"

namespace ifc2x3
{
   class IfcMove : public IfcTask
   {
   public:
      virtual ~IfcMove(){}

      IfcMove() = default;

      IfcMove(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcIdentifier& _TaskId, const bool& _IsMilestone, IfcSpatialStructureElement* _MoveFrom, IfcSpatialStructureElement* _MoveTo)
         : IfcTask(_GlobalId, _OwnerHistory, _TaskId, _IsMilestone), MoveFrom(_MoveFrom), MoveTo(_MoveTo) {}

      virtual std::string name() const { return "IfcMove"; }

      IfcSpatialStructureElement* MoveFrom; // required parameter
      IfcSpatialStructureElement* MoveTo; // required parameter
      std::vector<IfcText> PunchList; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(ObjectType);
         w.writeAttributeValueScalar(TaskId);
         w.writeAttributeValueScalar(Status);
         w.writeAttributeValueScalar(WorkMethod);
         w.writeAttributeValueScalar(IsMilestone);
         w.writeAttributeValueScalar(Priority);
         w.writeAttributeInstance(MoveFrom);
         w.writeAttributeInstance(MoveTo);
         w.writeAttributeValueList(PunchList);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
