#ifndef IFC2X3_IFCFILLAREASTYLEHATCHING_H_INCLUDED
#define IFC2X3_IFCFILLAREASTYLEHATCHING_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcGeometricRepresentationItem.h"
#include "IfcCurveStyle.h"
#include "IfcHatchLineDistanceSelect.h"
#include "IfcCartesianPoint.h"
#include "IfcCartesianPoint.h"

namespace ifc2x3
{
   class IfcFillAreaStyleHatching : public IfcGeometricRepresentationItem
   {
   public:
      virtual ~IfcFillAreaStyleHatching(){}

      IfcFillAreaStyleHatching() = default;

      IfcFillAreaStyleHatching(IfcCurveStyle* _HatchLineAppearance, const IfcHatchLineDistanceSelect& _StartOfNextHatchLine, const IfcPlaneAngleMeasure& _HatchLineAngle)
         : IfcGeometricRepresentationItem(), HatchLineAppearance(_HatchLineAppearance), StartOfNextHatchLine(_StartOfNextHatchLine), HatchLineAngle(_HatchLineAngle) {}

      virtual std::string name() const { return "IfcFillAreaStyleHatching"; }

      IfcCurveStyle* HatchLineAppearance; // required parameter
      boost::optional<IfcHatchLineDistanceSelect> StartOfNextHatchLine; // required parameter
      IfcCartesianPoint* PointOfReferenceHatchLine; // optional parameter
      IfcCartesianPoint* PatternStart; // optional parameter
      boost::optional<IfcPlaneAngleMeasure> HatchLineAngle; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(HatchLineAppearance);
         w.writeAttributeSelect<IfcHatchLineDistanceSelectWriterVisitor>(StartOfNextHatchLine);
         w.writeAttributeInstance(PointOfReferenceHatchLine);
         w.writeAttributeInstance(PatternStart);
         w.writeAttributeValueScalar(HatchLineAngle);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
