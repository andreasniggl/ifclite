// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcShapeModel.h"
#include "IfcProductDefinitionShape.h"

namespace ifc2x3
{
   class IfcShapeAspect : public ifc::Entity
   {
   public:
      virtual ~IfcShapeAspect(){}

      explicit IfcShapeAspect() = default;

      explicit IfcShapeAspect(const std::vector<IfcShapeModel*>& _ShapeRepresentations, const bool& _ProductDefinitional, IfcProductDefinitionShape* _PartOfProductDefinitionShape)
         : ifc::Entity(), ShapeRepresentations(_ShapeRepresentations), ProductDefinitional(_ProductDefinitional), PartOfProductDefinitionShape(_PartOfProductDefinitionShape) {}

      virtual std::string className() const { return "IfcShapeAspect"; }

      std::vector<IfcShapeModel*> ShapeRepresentations; // required parameter
      boost::optional<IfcLabel> Name; // optional parameter
      boost::optional<IfcText> Description; // optional parameter
      boost::optional<bool> ProductDefinitional; // required parameter
      IfcProductDefinitionShape* PartOfProductDefinitionShape; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(ShapeRepresentations);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ProductDefinitional);
         w.writeAttributeInstance(PartOfProductDefinitionShape);
         w.endEntity();
      }

   };

} // namespace ifc2x3

