// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcStructuralPlanarAction.h"
#include "IfcShapeAspect.h"
#include "IfcStructuralLoad.h"

namespace ifc2x3
{
   class IfcStructuralPlanarActionVarying : public IfcStructuralPlanarAction
   {
   public:
      virtual ~IfcStructuralPlanarActionVarying(){}

      explicit IfcStructuralPlanarActionVarying() = default;

      explicit IfcStructuralPlanarActionVarying(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, IfcStructuralLoad* _AppliedLoad, const IfcGlobalOrLocalEnum& _GlobalOrLocal, const bool& _DestabilizingLoad, const IfcProjectedOrTrueLengthEnum& _ProjectedOrTrue, IfcShapeAspect* _VaryingAppliedLoadLocation, const std::vector<IfcStructuralLoad*>& _SubsequentAppliedLoads)
         : IfcStructuralPlanarAction(_GlobalId, _OwnerHistory, _AppliedLoad, _GlobalOrLocal, _DestabilizingLoad, _ProjectedOrTrue), VaryingAppliedLoadLocation(_VaryingAppliedLoadLocation), SubsequentAppliedLoads(_SubsequentAppliedLoads) {}

      virtual std::string className() const { return "IfcStructuralPlanarActionVarying"; }

      IfcShapeAspect* VaryingAppliedLoadLocation; // required parameter
      std::vector<IfcStructuralLoad*> SubsequentAppliedLoads; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeInstance(ObjectPlacement);
         w.writeAttributeInstance(Representation);
         w.writeAttributeInstance(AppliedLoad);
         w.writeAttributeValue(IfcGlobalOrLocalEnumStringMap, GlobalOrLocal);
         w.writeAttributeValue(DestabilizingLoad);
         w.writeAttributeInstance(CausedBy);
         w.writeAttributeValue(IfcProjectedOrTrueLengthEnumStringMap, ProjectedOrTrue);
         w.writeAttributeInstance(VaryingAppliedLoadLocation);
         w.writeAttributeInstance(SubsequentAppliedLoads);
         w.endEntity();
      }

   };

} // namespace ifc2x3

