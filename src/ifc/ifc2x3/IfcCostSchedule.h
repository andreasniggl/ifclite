// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcActorSelect.h"
#include "IfcActorSelect.h"
#include "IfcDateTimeSelect.h"
#include "IfcActorSelect.h"
#include "IfcDateTimeSelect.h"

namespace ifc2x3
{
   class IfcCostSchedule : public IfcControl
   {
   public:
      virtual ~IfcCostSchedule(){}

      explicit IfcCostSchedule() = default;

      explicit IfcCostSchedule(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcIdentifier& _ID, const IfcCostScheduleTypeEnum& _PredefinedType)
         : IfcControl(_GlobalId, _OwnerHistory), ID(_ID), PredefinedType(_PredefinedType) {}

      virtual std::string className() const { return "IfcCostSchedule"; }

      boost::optional<IfcActorSelect> SubmittedBy; // optional parameter
      boost::optional<IfcActorSelect> PreparedBy; // optional parameter
      boost::optional<IfcDateTimeSelect> SubmittedOn; // optional parameter
      boost::optional<IfcLabel> Status; // optional parameter
      std::vector< boost::optional<IfcActorSelect> > TargetUsers; // optional parameter
      boost::optional<IfcDateTimeSelect> UpdateDate; // optional parameter
      boost::optional<IfcIdentifier> ID; // required parameter
      boost::optional<IfcCostScheduleTypeEnum> PredefinedType; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(SubmittedBy);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(PreparedBy);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(SubmittedOn);
         w.writeAttributeValue(Status);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(TargetUsers);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(UpdateDate);
         w.writeAttributeValue(ID);
         w.writeAttributeValue(IfcCostScheduleTypeEnumStringMap, PredefinedType);
         w.endEntity();
      }

   };

} // namespace ifc2x3

