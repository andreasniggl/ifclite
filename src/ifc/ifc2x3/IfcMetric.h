// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcConstraint.h"
#include "IfcMetricValueSelect.h"

namespace ifc2x3
{
   class IfcMetric : public IfcConstraint
   {
   public:
      virtual ~IfcMetric(){}

      explicit IfcMetric() = default;

      explicit IfcMetric(const IfcLabel& _Name, const IfcConstraintEnum& _ConstraintGrade, const IfcBenchmarkEnum& _Benchmark, const IfcMetricValueSelect& _DataValue)
         : IfcConstraint(_Name, _ConstraintGrade), Benchmark(_Benchmark), DataValue(_DataValue) {}

      virtual std::string className() const { return "IfcMetric"; }

      boost::optional<IfcBenchmarkEnum> Benchmark; // required parameter
      boost::optional<IfcLabel> ValueSource; // optional parameter
      boost::optional<IfcMetricValueSelect> DataValue; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IfcConstraintEnumStringMap, ConstraintGrade);
         w.writeAttributeValue(ConstraintSource);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(CreatingActor);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(CreationTime);
         w.writeAttributeValue(UserDefinedGrade);
         w.writeAttributeValue(IfcBenchmarkEnumStringMap, Benchmark);
         w.writeAttributeValue(ValueSource);
         w.writeAttributeSelect<IfcMetricValueSelectWriterVisitor>(DataValue);
         w.endEntity();
      }

   };

} // namespace ifc2x3

