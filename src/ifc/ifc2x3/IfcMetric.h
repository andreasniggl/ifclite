#ifndef IFC2X3_IFCMETRIC_H_INCLUDED
#define IFC2X3_IFCMETRIC_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcConstraint.h"
#include "IfcMetricValueSelect.h"

namespace ifc2x3
{
   class IfcMetric : public IfcConstraint
   {
   public:
      virtual ~IfcMetric(){}

      IfcMetric() = default;

      IfcMetric(const IfcLabel& _Name, const IfcConstraintEnum& _ConstraintGrade, const IfcBenchmarkEnum& _Benchmark, const IfcMetricValueSelect& _DataValue)
         : IfcConstraint(_Name, _ConstraintGrade), Benchmark(_Benchmark), DataValue(_DataValue) {}

      virtual std::string name() const { return "IfcMetric"; }

      boost::optional<IfcBenchmarkEnum> Benchmark; // required parameter
      boost::optional<IfcLabel> ValueSource; // optional parameter
      boost::optional<IfcMetricValueSelect> DataValue; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueEnumeration(IfcConstraintEnumStringMap, ConstraintGrade);
         w.writeAttributeValueScalar(ConstraintSource);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(CreatingActor);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(CreationTime);
         w.writeAttributeValueScalar(UserDefinedGrade);
         w.writeAttributeValueEnumeration(IfcBenchmarkEnumStringMap, Benchmark);
         w.writeAttributeValueScalar(ValueSource);
         w.writeAttributeSelect<IfcMetricValueSelectWriterVisitor>(DataValue);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
