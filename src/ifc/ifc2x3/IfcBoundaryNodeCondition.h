#ifndef IFC2X3_IFCBOUNDARYNODECONDITION_H_INCLUDED
#define IFC2X3_IFCBOUNDARYNODECONDITION_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcBoundaryCondition.h"

namespace ifc2x3
{
   class IfcBoundaryNodeCondition : public IfcBoundaryCondition
   {
   public:
      virtual ~IfcBoundaryNodeCondition(){}

      IfcBoundaryNodeCondition() = default;

      virtual std::string name() const { return "IfcBoundaryNodeCondition"; }

      boost::optional<IfcLinearStiffnessMeasure> LinearStiffnessX; // optional parameter
      boost::optional<IfcLinearStiffnessMeasure> LinearStiffnessY; // optional parameter
      boost::optional<IfcLinearStiffnessMeasure> LinearStiffnessZ; // optional parameter
      boost::optional<IfcRotationalStiffnessMeasure> RotationalStiffnessX; // optional parameter
      boost::optional<IfcRotationalStiffnessMeasure> RotationalStiffnessY; // optional parameter
      boost::optional<IfcRotationalStiffnessMeasure> RotationalStiffnessZ; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(LinearStiffnessX);
         w.writeAttributeValueScalar(LinearStiffnessY);
         w.writeAttributeValueScalar(LinearStiffnessZ);
         w.writeAttributeValueScalar(RotationalStiffnessX);
         w.writeAttributeValueScalar(RotationalStiffnessY);
         w.writeAttributeValueScalar(RotationalStiffnessZ);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
