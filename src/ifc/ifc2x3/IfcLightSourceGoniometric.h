#ifndef IFC2X3_IFCLIGHTSOURCEGONIOMETRIC_H_INCLUDED
#define IFC2X3_IFCLIGHTSOURCEGONIOMETRIC_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcLightSource.h"
#include "IfcAxis2Placement3D.h"
#include "IfcColourRgb.h"
#include "IfcLightDistributionDataSourceSelect.h"

namespace ifc2x3
{
   class IfcLightSourceGoniometric : public IfcLightSource
   {
   public:
      virtual ~IfcLightSourceGoniometric(){}

      IfcLightSourceGoniometric() = default;

      IfcLightSourceGoniometric(IfcColourRgb* _LightColour, IfcAxis2Placement3D* _Position, const IfcThermodynamicTemperatureMeasure& _ColourTemperature, const IfcLuminousFluxMeasure& _LuminousFlux, const IfcLightEmissionSourceEnum& _LightEmissionSource, const IfcLightDistributionDataSourceSelect& _LightDistributionDataSource)
         : IfcLightSource(_LightColour), Position(_Position), ColourTemperature(_ColourTemperature), LuminousFlux(_LuminousFlux), LightEmissionSource(_LightEmissionSource), LightDistributionDataSource(_LightDistributionDataSource) {}

      virtual std::string name() const { return "IfcLightSourceGoniometric"; }

      IfcAxis2Placement3D* Position; // required parameter
      IfcColourRgb* ColourAppearance; // optional parameter
      boost::optional<IfcThermodynamicTemperatureMeasure> ColourTemperature; // required parameter
      boost::optional<IfcLuminousFluxMeasure> LuminousFlux; // required parameter
      boost::optional<IfcLightEmissionSourceEnum> LightEmissionSource; // required parameter
      boost::optional<IfcLightDistributionDataSourceSelect> LightDistributionDataSource; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeInstance(LightColour);
         w.writeAttributeValueScalar(AmbientIntensity);
         w.writeAttributeValueScalar(Intensity);
         w.writeAttributeInstance(Position);
         w.writeAttributeInstance(ColourAppearance);
         w.writeAttributeValueScalar(ColourTemperature);
         w.writeAttributeValueScalar(LuminousFlux);
         w.writeAttributeValueEnumeration(IfcLightEmissionSourceEnumStringMap, LightEmissionSource);
         w.writeAttributeSelect<IfcLightDistributionDataSourceSelectWriterVisitor>(LightDistributionDataSource);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
