#ifndef IFC2X3_IFCMECHANICALCONCRETEMATERIALPROPERTIES_H_INCLUDED
#define IFC2X3_IFCMECHANICALCONCRETEMATERIALPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcMechanicalMaterialProperties.h"

namespace ifc2x3
{
   class IfcMechanicalConcreteMaterialProperties : public IfcMechanicalMaterialProperties
   {
   public:
      virtual ~IfcMechanicalConcreteMaterialProperties(){}

      IfcMechanicalConcreteMaterialProperties() = default;

      IfcMechanicalConcreteMaterialProperties(IfcMaterial* _Material)
         : IfcMechanicalMaterialProperties(_Material) {}

      virtual std::string name() const { return "IfcMechanicalConcreteMaterialProperties"; }

      boost::optional<IfcPressureMeasure> CompressiveStrength; // optional parameter
      boost::optional<IfcPositiveLengthMeasure> MaxAggregateSize; // optional parameter
      boost::optional<IfcText> AdmixturesDescription; // optional parameter
      boost::optional<IfcText> Workability; // optional parameter
      boost::optional<IfcNormalisedRatioMeasure> ProtectivePoreRatio; // optional parameter
      boost::optional<IfcText> WaterImpermeability; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(Material);
         w.writeAttributeValueScalar(DynamicViscosity);
         w.writeAttributeValueScalar(YoungModulus);
         w.writeAttributeValueScalar(ShearModulus);
         w.writeAttributeValueScalar(PoissonRatio);
         w.writeAttributeValueScalar(ThermalExpansionCoefficient);
         w.writeAttributeValueScalar(CompressiveStrength);
         w.writeAttributeValueScalar(MaxAggregateSize);
         w.writeAttributeValueScalar(AdmixturesDescription);
         w.writeAttributeValueScalar(Workability);
         w.writeAttributeValueScalar(ProtectivePoreRatio);
         w.writeAttributeValueScalar(WaterImpermeability);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
