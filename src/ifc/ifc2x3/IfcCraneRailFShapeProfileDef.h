// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcParameterizedProfileDef.h"

namespace ifc2x3
{
   class IfcCraneRailFShapeProfileDef : public IfcParameterizedProfileDef
   {
   public:
      virtual ~IfcCraneRailFShapeProfileDef(){}

      explicit IfcCraneRailFShapeProfileDef() = default;

      explicit IfcCraneRailFShapeProfileDef(const IfcProfileTypeEnum& _ProfileType, IfcAxis2Placement2D* _Position, const IfcPositiveLengthMeasure& _OverallHeight, const IfcPositiveLengthMeasure& _HeadWidth, const IfcPositiveLengthMeasure& _HeadDepth2, const IfcPositiveLengthMeasure& _HeadDepth3, const IfcPositiveLengthMeasure& _WebThickness, const IfcPositiveLengthMeasure& _BaseDepth1, const IfcPositiveLengthMeasure& _BaseDepth2)
         : IfcParameterizedProfileDef(_ProfileType, _Position), OverallHeight(_OverallHeight), HeadWidth(_HeadWidth), HeadDepth2(_HeadDepth2), HeadDepth3(_HeadDepth3), WebThickness(_WebThickness), BaseDepth1(_BaseDepth1), BaseDepth2(_BaseDepth2) {}

      virtual std::string className() const { return "IfcCraneRailFShapeProfileDef"; }

      boost::optional<IfcPositiveLengthMeasure> OverallHeight; // required parameter
      boost::optional<IfcPositiveLengthMeasure> HeadWidth; // required parameter
      boost::optional<IfcPositiveLengthMeasure> Radius; // optional parameter
      boost::optional<IfcPositiveLengthMeasure> HeadDepth2; // required parameter
      boost::optional<IfcPositiveLengthMeasure> HeadDepth3; // required parameter
      boost::optional<IfcPositiveLengthMeasure> WebThickness; // required parameter
      boost::optional<IfcPositiveLengthMeasure> BaseDepth1; // required parameter
      boost::optional<IfcPositiveLengthMeasure> BaseDepth2; // required parameter
      boost::optional<IfcPositiveLengthMeasure> CentreOfGravityInY; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(IfcProfileTypeEnumStringMap, ProfileType);
         w.writeAttributeValue(ProfileName);
         w.writeAttributeInstance(Position);
         w.writeAttributeValue(OverallHeight);
         w.writeAttributeValue(HeadWidth);
         w.writeAttributeValue(Radius);
         w.writeAttributeValue(HeadDepth2);
         w.writeAttributeValue(HeadDepth3);
         w.writeAttributeValue(WebThickness);
         w.writeAttributeValue(BaseDepth1);
         w.writeAttributeValue(BaseDepth2);
         w.writeAttributeValue(CentreOfGravityInY);
         w.endEntity();
      }

   };

} // namespace ifc2x3

