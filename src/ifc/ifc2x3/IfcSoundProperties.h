// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcPropertySetDefinition.h"
#include "IfcSoundValue.h"

namespace ifc2x3
{
   class IfcSoundProperties : public IfcPropertySetDefinition
   {
   public:
      virtual ~IfcSoundProperties(){}

      explicit IfcSoundProperties() = default;

      explicit IfcSoundProperties(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcBoolean& _IsAttenuating, const std::vector<IfcSoundValue*>& _SoundValues)
         : IfcPropertySetDefinition(_GlobalId, _OwnerHistory), IsAttenuating(_IsAttenuating), SoundValues(_SoundValues) {}

      virtual std::string className() const { return "IfcSoundProperties"; }

      boost::optional<IfcBoolean> IsAttenuating; // required parameter
      boost::optional<IfcSoundScaleEnum> SoundScale; // optional parameter
      std::vector<IfcSoundValue*> SoundValues; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IsAttenuating);
         w.writeAttributeValue(IfcSoundScaleEnumStringMap, SoundScale);
         w.writeAttributeInstance(SoundValues);
         w.endEntity();
      }

   };

} // namespace ifc2x3

