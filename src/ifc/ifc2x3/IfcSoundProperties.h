#ifndef IFC2X3_IFCSOUNDPROPERTIES_H_INCLUDED
#define IFC2X3_IFCSOUNDPROPERTIES_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcPropertySetDefinition.h"
#include "IfcSoundValue.h"

namespace ifc2x3
{
   class IfcSoundProperties : public IfcPropertySetDefinition
   {
   public:
      virtual ~IfcSoundProperties(){}

      IfcSoundProperties() = default;

      IfcSoundProperties(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcBoolean& _IsAttenuating, const std::vector<IfcSoundValue*>& _SoundValues)
         : IfcPropertySetDefinition(_GlobalId, _OwnerHistory), IsAttenuating(_IsAttenuating), SoundValues(_SoundValues) {}

      virtual std::string name() const { return "IfcSoundProperties"; }

      boost::optional<IfcBoolean> IsAttenuating; // required parameter
      boost::optional<IfcSoundScaleEnum> SoundScale; // optional parameter
      std::vector<IfcSoundValue*> SoundValues; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(IsAttenuating);
         w.writeAttributeValueEnumeration(IfcSoundScaleEnumStringMap, SoundScale);
         w.writeAttributeInstanceList(SoundValues);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
