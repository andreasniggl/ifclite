// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcProcess.h"

namespace ifc2x3
{
   class IfcTask : public IfcProcess
   {
   public:
      virtual ~IfcTask(){}

      explicit IfcTask() = default;

      explicit IfcTask(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcIdentifier& _TaskId, const bool& _IsMilestone)
         : IfcProcess(_GlobalId, _OwnerHistory), TaskId(_TaskId), IsMilestone(_IsMilestone) {}

      virtual std::string className() const { return "IfcTask"; }

      boost::optional<IfcIdentifier> TaskId; // required parameter
      boost::optional<IfcLabel> Status; // optional parameter
      boost::optional<IfcLabel> WorkMethod; // optional parameter
      boost::optional<bool> IsMilestone; // required parameter
      boost::optional<int> Priority; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(TaskId);
         w.writeAttributeValue(Status);
         w.writeAttributeValue(WorkMethod);
         w.writeAttributeValue(IsMilestone);
         w.writeAttributeValue(Priority);
         w.endEntity();
      }

   };

} // namespace ifc2x3

