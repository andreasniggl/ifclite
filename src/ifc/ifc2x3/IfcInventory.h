#ifndef IFC2X3_IFCINVENTORY_H_INCLUDED
#define IFC2X3_IFCINVENTORY_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcGroup.h"
#include "IfcActorSelect.h"
#include "IfcPerson.h"
#include "IfcCalendarDate.h"
#include "IfcCostValue.h"
#include "IfcCostValue.h"

namespace ifc2x3
{
   class IfcInventory : public IfcGroup
   {
   public:
      virtual ~IfcInventory(){}

      IfcInventory() = default;

      IfcInventory(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcInventoryTypeEnum& _InventoryType, const IfcActorSelect& _Jurisdiction, const std::vector<IfcPerson*>& _ResponsiblePersons, IfcCalendarDate* _LastUpdateDate)
         : IfcGroup(_GlobalId, _OwnerHistory), InventoryType(_InventoryType), Jurisdiction(_Jurisdiction), ResponsiblePersons(_ResponsiblePersons), LastUpdateDate(_LastUpdateDate) {}

      virtual std::string name() const { return "IfcInventory"; }

      boost::optional<IfcInventoryTypeEnum> InventoryType; // required parameter
      boost::optional<IfcActorSelect> Jurisdiction; // required parameter
      std::vector<IfcPerson*> ResponsiblePersons; // required parameter
      IfcCalendarDate* LastUpdateDate; // required parameter
      IfcCostValue* CurrentValue; // optional parameter
      IfcCostValue* OriginalValue; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(ObjectType);
         w.writeAttributeValueEnumeration(IfcInventoryTypeEnumStringMap, InventoryType);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(Jurisdiction);
         w.writeAttributeInstanceList(ResponsiblePersons);
         w.writeAttributeInstance(LastUpdateDate);
         w.writeAttributeInstance(CurrentValue);
         w.writeAttributeInstance(OriginalValue);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
