// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcSimpleProperty.h"
#include "IfcValue.h"
#include "IfcValue.h"
#include "IfcUnit.h"
#include "IfcUnit.h"

namespace ifc2x3
{
   class IfcPropertyTableValue : public IfcSimpleProperty
   {
   public:
      virtual ~IfcPropertyTableValue(){}

      explicit IfcPropertyTableValue() = default;

      explicit IfcPropertyTableValue(const IfcIdentifier& _Name, const std::vector< boost::optional<IfcValue> >& _DefiningValues, const std::vector< boost::optional<IfcValue> >& _DefinedValues)
         : IfcSimpleProperty(_Name), DefiningValues(_DefiningValues), DefinedValues(_DefinedValues) {}

      virtual std::string className() const { return "IfcPropertyTableValue"; }

      std::vector< boost::optional<IfcValue> > DefiningValues; // required parameter
      std::vector< boost::optional<IfcValue> > DefinedValues; // required parameter
      boost::optional<IfcText> Expression; // optional parameter
      boost::optional<IfcUnit> DefiningUnit; // optional parameter
      boost::optional<IfcUnit> DefinedUnit; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeSelect<IfcValueWriterVisitor>(DefiningValues);
         w.writeAttributeSelect<IfcValueWriterVisitor>(DefinedValues);
         w.writeAttributeValue(Expression);
         w.writeAttributeSelect<IfcUnitWriterVisitor>(DefiningUnit);
         w.writeAttributeSelect<IfcUnitWriterVisitor>(DefinedUnit);
         w.endEntity();
      }

   };

} // namespace ifc2x3

