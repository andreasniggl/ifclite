#ifndef IFC2X3_IFCPROJECTORDERRECORD_H_INCLUDED
#define IFC2X3_IFCPROJECTORDERRECORD_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcRelAssignsToProjectOrder.h"

namespace ifc2x3
{
   class IfcProjectOrderRecord : public IfcControl
   {
   public:
      virtual ~IfcProjectOrderRecord(){}

      IfcProjectOrderRecord() = default;

      IfcProjectOrderRecord(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const std::vector<IfcRelAssignsToProjectOrder*>& _Records, const IfcProjectOrderRecordTypeEnum& _PredefinedType)
         : IfcControl(_GlobalId, _OwnerHistory), Records(_Records), PredefinedType(_PredefinedType) {}

      virtual std::string name() const { return "IfcProjectOrderRecord"; }

      std::vector<IfcRelAssignsToProjectOrder*> Records; // required parameter
      boost::optional<IfcProjectOrderRecordTypeEnum> PredefinedType; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(ObjectType);
         w.writeAttributeInstanceList(Records);
         w.writeAttributeValueEnumeration(IfcProjectOrderRecordTypeEnumStringMap, PredefinedType);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
