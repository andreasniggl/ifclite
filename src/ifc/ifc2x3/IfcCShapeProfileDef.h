#ifndef IFC2X3_IFCCSHAPEPROFILEDEF_H_INCLUDED
#define IFC2X3_IFCCSHAPEPROFILEDEF_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcParameterizedProfileDef.h"

namespace ifc2x3
{
   class IfcCShapeProfileDef : public IfcParameterizedProfileDef
   {
   public:
      virtual ~IfcCShapeProfileDef(){}

      IfcCShapeProfileDef() = default;

      IfcCShapeProfileDef(const IfcProfileTypeEnum& _ProfileType, IfcAxis2Placement2D* _Position, const IfcPositiveLengthMeasure& _Depth, const IfcPositiveLengthMeasure& _Width, const IfcPositiveLengthMeasure& _WallThickness, const IfcPositiveLengthMeasure& _Girth)
         : IfcParameterizedProfileDef(_ProfileType, _Position), Depth(_Depth), Width(_Width), WallThickness(_WallThickness), Girth(_Girth) {}

      virtual std::string name() const { return "IfcCShapeProfileDef"; }

      boost::optional<IfcPositiveLengthMeasure> Depth; // required parameter
      boost::optional<IfcPositiveLengthMeasure> Width; // required parameter
      boost::optional<IfcPositiveLengthMeasure> WallThickness; // required parameter
      boost::optional<IfcPositiveLengthMeasure> Girth; // required parameter
      boost::optional<IfcPositiveLengthMeasure> InternalFilletRadius; // optional parameter
      boost::optional<IfcPositiveLengthMeasure> CentreOfGravityInX; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueEnumeration(IfcProfileTypeEnumStringMap, ProfileType);
         w.writeAttributeValueScalar(ProfileName);
         w.writeAttributeInstance(Position);
         w.writeAttributeValueScalar(Depth);
         w.writeAttributeValueScalar(Width);
         w.writeAttributeValueScalar(WallThickness);
         w.writeAttributeValueScalar(Girth);
         w.writeAttributeValueScalar(InternalFilletRadius);
         w.writeAttributeValueScalar(CentreOfGravityInX);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
