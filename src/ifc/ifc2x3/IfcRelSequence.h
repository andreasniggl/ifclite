// Automatically generated by ifclite express parser from ifc2x3 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcRelConnects.h"
#include "IfcProcess.h"
#include "IfcProcess.h"

namespace ifc2x3
{
   class IfcRelSequence : public IfcRelConnects
   {
   public:
      virtual ~IfcRelSequence(){}

      explicit IfcRelSequence() = default;

      explicit IfcRelSequence(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, IfcProcess* _RelatingProcess, IfcProcess* _RelatedProcess, const IfcTimeMeasure& _TimeLag, const IfcSequenceEnum& _SequenceType)
         : IfcRelConnects(_GlobalId, _OwnerHistory), RelatingProcess(_RelatingProcess), RelatedProcess(_RelatedProcess), TimeLag(_TimeLag), SequenceType(_SequenceType) {}

      virtual std::string className() const { return "IfcRelSequence"; }

      IfcProcess* RelatingProcess; // required parameter
      IfcProcess* RelatedProcess; // required parameter
      boost::optional<IfcTimeMeasure> TimeLag; // required parameter
      boost::optional<IfcSequenceEnum> SequenceType; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeInstance(RelatingProcess);
         w.writeAttributeInstance(RelatedProcess);
         w.writeAttributeValue(TimeLag);
         w.writeAttributeValue(IfcSequenceEnumStringMap, SequenceType);
         w.endEntity();
      }

   };

} // namespace ifc2x3

