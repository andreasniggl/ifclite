#ifndef IFC2X3_IFCRELCONNECTSWITHREALIZINGELEMENTS_H_INCLUDED
#define IFC2X3_IFCRELCONNECTSWITHREALIZINGELEMENTS_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcRelConnectsElements.h"
#include "IfcElement.h"

namespace ifc2x3
{
   class IfcRelConnectsWithRealizingElements : public IfcRelConnectsElements
   {
   public:
      virtual ~IfcRelConnectsWithRealizingElements(){}

      IfcRelConnectsWithRealizingElements() = default;

      IfcRelConnectsWithRealizingElements(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, IfcElement* _RelatingElement, IfcElement* _RelatedElement, const std::vector<IfcElement*>& _RealizingElements)
         : IfcRelConnectsElements(_GlobalId, _OwnerHistory, _RelatingElement, _RelatedElement), RealizingElements(_RealizingElements) {}

      virtual std::string name() const { return "IfcRelConnectsWithRealizingElements"; }

      std::vector<IfcElement*> RealizingElements; // required parameter
      boost::optional<IfcLabel> ConnectionType; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeInstance(ConnectionGeometry);
         w.writeAttributeInstance(RelatingElement);
         w.writeAttributeInstance(RelatedElement);
         w.writeAttributeInstanceList(RealizingElements);
         w.writeAttributeValueScalar(ConnectionType);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
