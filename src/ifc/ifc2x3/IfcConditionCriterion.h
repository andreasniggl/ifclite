#ifndef IFC2X3_IFCCONDITIONCRITERION_H_INCLUDED
#define IFC2X3_IFCCONDITIONCRITERION_H_INCLUDED

// Automatically generated by sof_sdai_toolkit from ifc2x3 express file - do not modify

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcConditionCriterionSelect.h"
#include "IfcDateTimeSelect.h"

namespace ifc2x3
{
   class IfcConditionCriterion : public IfcControl
   {
   public:
      virtual ~IfcConditionCriterion(){}

      IfcConditionCriterion() = default;

      IfcConditionCriterion(const IfcGloballyUniqueId& _GlobalId, IfcOwnerHistory* _OwnerHistory, const IfcConditionCriterionSelect& _Criterion, const IfcDateTimeSelect& _CriterionDateTime)
         : IfcControl(_GlobalId, _OwnerHistory), Criterion(_Criterion), CriterionDateTime(_CriterionDateTime) {}

      virtual std::string name() const { return "IfcConditionCriterion"; }

      boost::optional<IfcConditionCriterionSelect> Criterion; // required parameter
      boost::optional<IfcDateTimeSelect> CriterionDateTime; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValueScalar(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValueScalar(Name);
         w.writeAttributeValueScalar(Description);
         w.writeAttributeValueScalar(ObjectType);
         w.writeAttributeSelect<IfcConditionCriterionSelectWriterVisitor>(Criterion);
         w.writeAttributeSelect<IfcDateTimeSelectWriterVisitor>(CriterionDateTime);
         w.endEntity();
      }

   };

} // namespace ifc2x3

#endif
