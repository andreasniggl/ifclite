// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcConstraint.h"
#include "IfcConstraint.h"

namespace ifc4
{
   class IfcObjective : public IfcConstraint
   {
   public:
      virtual ~IfcObjective(){}

      explicit IfcObjective() = default;

      explicit IfcObjective(const IfcLabel& _Name, const IfcConstraintEnum& _ConstraintGrade, const IfcObjectiveEnum& _ObjectiveQualifier)
         : IfcConstraint(_Name, _ConstraintGrade), ObjectiveQualifier(_ObjectiveQualifier) {}

      virtual std::string className() const { return "IfcObjective"; }

      std::vector<IfcConstraint*> BenchmarkValues; // optional parameter
      boost::optional<IfcLogicalOperatorEnum> LogicalAggregator; // optional parameter
      boost::optional<IfcObjectiveEnum> ObjectiveQualifier; // required parameter
      boost::optional<IfcLabel> UserDefinedQualifier; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IfcConstraintEnumStringMap, ConstraintGrade);
         w.writeAttributeValue(ConstraintSource);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(CreatingActor);
         w.writeAttributeValue(CreationTime);
         w.writeAttributeValue(UserDefinedGrade);
         w.writeAttributeInstance(BenchmarkValues);
         w.writeAttributeValue(IfcLogicalOperatorEnumStringMap, LogicalAggregator);
         w.writeAttributeValue(IfcObjectiveEnumStringMap, ObjectiveQualifier);
         w.writeAttributeValue(UserDefinedQualifier);
         w.endEntity();
      }

   };

} // namespace ifc4

