// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcPropertyTemplateDefinition.h"
#include "IfcPropertyTemplate.h"

namespace ifc4
{
   class IfcPropertySetTemplate : public IfcPropertyTemplateDefinition
   {
   public:
      virtual ~IfcPropertySetTemplate(){}

      explicit IfcPropertySetTemplate() = default;

      explicit IfcPropertySetTemplate(const IfcGloballyUniqueId& _GlobalId, const std::vector<IfcPropertyTemplate*>& _HasPropertyTemplates)
         : IfcPropertyTemplateDefinition(_GlobalId), HasPropertyTemplates(_HasPropertyTemplates) {}

      virtual std::string className() const { return "IfcPropertySetTemplate"; }

      boost::optional<IfcPropertySetTemplateTypeEnum> TemplateType; // optional parameter
      boost::optional<IfcIdentifier> ApplicableEntity; // optional parameter
      std::vector<IfcPropertyTemplate*> HasPropertyTemplates; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(IfcPropertySetTemplateTypeEnumStringMap, TemplateType);
         w.writeAttributeValue(ApplicableEntity);
         w.writeAttributeInstance(HasPropertyTemplates);
         w.endEntity();
      }

   };

} // namespace ifc4

