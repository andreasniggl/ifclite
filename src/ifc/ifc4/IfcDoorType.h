// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcBuildingElementType.h"

namespace ifc4
{
   class IfcDoorType : public IfcBuildingElementType
   {
   public:
      virtual ~IfcDoorType(){}

      explicit IfcDoorType() = default;

      explicit IfcDoorType(const IfcGloballyUniqueId& _GlobalId, const IfcDoorTypeEnum& _PredefinedType, const IfcDoorTypeOperationEnum& _OperationType)
         : IfcBuildingElementType(_GlobalId), PredefinedType(_PredefinedType), OperationType(_OperationType) {}

      virtual std::string className() const { return "IfcDoorType"; }

      boost::optional<IfcDoorTypeEnum> PredefinedType; // required parameter
      boost::optional<IfcDoorTypeOperationEnum> OperationType; // required parameter
      boost::optional<IfcBoolean> ParameterTakesPrecedence; // optional parameter
      boost::optional<IfcLabel> UserDefinedOperationType; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ApplicableOccurrence);
         w.writeAttributeInstance(HasPropertySets);
         w.writeAttributeInstance(RepresentationMaps);
         w.writeAttributeValue(Tag);
         w.writeAttributeValue(ElementType);
         w.writeAttributeValue(IfcDoorTypeEnumStringMap, PredefinedType);
         w.writeAttributeValue(IfcDoorTypeOperationEnumStringMap, OperationType);
         w.writeAttributeValue(ParameterTakesPrecedence);
         w.writeAttributeValue(UserDefinedOperationType);
         w.endEntity();
      }

   };

} // namespace ifc4

