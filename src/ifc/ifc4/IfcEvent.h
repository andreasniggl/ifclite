// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcProcess.h"
#include "IfcEventTime.h"

namespace ifc4
{
   class IfcEvent : public IfcProcess
   {
   public:
      virtual ~IfcEvent(){}

      explicit IfcEvent() = default;

      explicit IfcEvent(const IfcGloballyUniqueId& _GlobalId)
         : IfcProcess(_GlobalId) {}

      virtual std::string className() const { return "IfcEvent"; }

      boost::optional<IfcEventTypeEnum> PredefinedType; // optional parameter
      boost::optional<IfcEventTriggerTypeEnum> EventTriggerType; // optional parameter
      boost::optional<IfcLabel> UserDefinedEventTriggerType; // optional parameter
      IfcEventTime* EventOccurenceTime; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(Identification);
         w.writeAttributeValue(LongDescription);
         w.writeAttributeValue(IfcEventTypeEnumStringMap, PredefinedType);
         w.writeAttributeValue(IfcEventTriggerTypeEnumStringMap, EventTriggerType);
         w.writeAttributeValue(UserDefinedEventTriggerType);
         w.writeAttributeInstance(EventOccurenceTime);
         w.endEntity();
      }

   };

} // namespace ifc4

