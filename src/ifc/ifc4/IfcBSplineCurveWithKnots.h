// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcBSplineCurve.h"

namespace ifc4
{
   class IfcBSplineCurveWithKnots : public IfcBSplineCurve
   {
   public:
      virtual ~IfcBSplineCurveWithKnots(){}

      explicit IfcBSplineCurveWithKnots() = default;

      explicit IfcBSplineCurveWithKnots(const IfcInteger& _Degree, const std::vector<IfcCartesianPoint*>& _ControlPointsList, const IfcBSplineCurveForm& _CurveForm, const IfcLogical& _ClosedCurve, const IfcLogical& _SelfIntersect, const std::vector<IfcInteger>& _KnotMultiplicities, const std::vector<IfcParameterValue>& _Knots, const IfcKnotType& _KnotSpec)
         : IfcBSplineCurve(_Degree, _ControlPointsList, _CurveForm, _ClosedCurve, _SelfIntersect), KnotMultiplicities(_KnotMultiplicities), Knots(_Knots), KnotSpec(_KnotSpec) {}

      virtual std::string className() const { return "IfcBSplineCurveWithKnots"; }

      std::vector<IfcInteger> KnotMultiplicities; // required parameter
      std::vector<IfcParameterValue> Knots; // required parameter
      boost::optional<IfcKnotType> KnotSpec; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Degree);
         w.writeAttributeInstance(ControlPointsList);
         w.writeAttributeValue(IfcBSplineCurveFormStringMap, CurveForm);
         w.writeAttributeValue(ClosedCurve);
         w.writeAttributeValue(SelfIntersect);
         w.writeAttributeValue(KnotMultiplicities);
         w.writeAttributeValue(Knots);
         w.writeAttributeValue(IfcKnotTypeStringMap, KnotSpec);
         w.endEntity();
      }

   };

} // namespace ifc4

