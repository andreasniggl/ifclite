// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "Entity.h"
#include "IfcTimePeriod.h"

namespace ifc4
{
   class IfcRecurrencePattern : public ifc::Entity
   {
   public:
      virtual ~IfcRecurrencePattern(){}

      explicit IfcRecurrencePattern() = default;

      explicit IfcRecurrencePattern(const IfcRecurrenceTypeEnum& _RecurrenceType)
         : ifc::Entity(), RecurrenceType(_RecurrenceType) {}

      virtual std::string className() const { return "IfcRecurrencePattern"; }

      boost::optional<IfcRecurrenceTypeEnum> RecurrenceType; // required parameter
      std::vector<IfcDayInMonthNumber> DayComponent; // optional parameter
      std::vector<IfcDayInWeekNumber> WeekdayComponent; // optional parameter
      std::vector<IfcMonthInYearNumber> MonthComponent; // optional parameter
      boost::optional<IfcInteger> Position; // optional parameter
      boost::optional<IfcInteger> Interval; // optional parameter
      boost::optional<IfcInteger> Occurrences; // optional parameter
      std::vector<IfcTimePeriod*> TimePeriods; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(IfcRecurrenceTypeEnumStringMap, RecurrenceType);
         w.writeAttributeValue(DayComponent);
         w.writeAttributeValue(WeekdayComponent);
         w.writeAttributeValue(MonthComponent);
         w.writeAttributeValue(Position);
         w.writeAttributeValue(Interval);
         w.writeAttributeValue(Occurrences);
         w.writeAttributeInstance(TimePeriods);
         w.endEntity();
      }

   };

} // namespace ifc4

