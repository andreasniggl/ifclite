// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcGroup.h"
#include "IfcActorSelect.h"
#include "IfcPerson.h"
#include "IfcCostValue.h"
#include "IfcCostValue.h"

namespace ifc4
{
   class IfcInventory : public IfcGroup
   {
   public:
      virtual ~IfcInventory(){}

      explicit IfcInventory() = default;

      explicit IfcInventory(const IfcGloballyUniqueId& _GlobalId)
         : IfcGroup(_GlobalId) {}

      virtual std::string className() const { return "IfcInventory"; }

      boost::optional<IfcInventoryTypeEnum> PredefinedType; // optional parameter
      boost::optional<IfcActorSelect> Jurisdiction; // optional parameter
      std::vector<IfcPerson*> ResponsiblePersons; // optional parameter
      boost::optional<IfcDate> LastUpdateDate; // optional parameter
      IfcCostValue* CurrentValue; // optional parameter
      IfcCostValue* OriginalValue; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(IfcInventoryTypeEnumStringMap, PredefinedType);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(Jurisdiction);
         w.writeAttributeInstance(ResponsiblePersons);
         w.writeAttributeValue(LastUpdateDate);
         w.writeAttributeInstance(CurrentValue);
         w.writeAttributeInstance(OriginalValue);
         w.endEntity();
      }

   };

} // namespace ifc4

