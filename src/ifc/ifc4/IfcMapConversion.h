// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcCoordinateOperation.h"

namespace ifc4
{
   class IfcMapConversion : public IfcCoordinateOperation
   {
   public:
      virtual ~IfcMapConversion(){}

      explicit IfcMapConversion() = default;

      explicit IfcMapConversion(const IfcCoordinateReferenceSystemSelect& _SourceCRS, IfcCoordinateReferenceSystem* _TargetCRS, const IfcLengthMeasure& _Eastings, const IfcLengthMeasure& _Northings, const IfcLengthMeasure& _OrthogonalHeight)
         : IfcCoordinateOperation(_SourceCRS, _TargetCRS), Eastings(_Eastings), Northings(_Northings), OrthogonalHeight(_OrthogonalHeight) {}

      virtual std::string className() const { return "IfcMapConversion"; }

      boost::optional<IfcLengthMeasure> Eastings; // required parameter
      boost::optional<IfcLengthMeasure> Northings; // required parameter
      boost::optional<IfcLengthMeasure> OrthogonalHeight; // required parameter
      boost::optional<IfcReal> XAxisAbscissa; // optional parameter
      boost::optional<IfcReal> XAxisOrdinate; // optional parameter
      boost::optional<IfcReal> Scale; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeSelect<IfcCoordinateReferenceSystemSelectWriterVisitor>(SourceCRS);
         w.writeAttributeInstance(TargetCRS);
         w.writeAttributeValue(Eastings);
         w.writeAttributeValue(Northings);
         w.writeAttributeValue(OrthogonalHeight);
         w.writeAttributeValue(XAxisAbscissa);
         w.writeAttributeValue(XAxisOrdinate);
         w.writeAttributeValue(Scale);
         w.endEntity();
      }

   };

} // namespace ifc4

