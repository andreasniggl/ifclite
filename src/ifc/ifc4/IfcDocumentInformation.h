// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcExternalInformation.h"
#include "IfcActorSelect.h"
#include "IfcActorSelect.h"

namespace ifc4
{
   class IfcDocumentInformation : public IfcExternalInformation
   {
   public:
      virtual ~IfcDocumentInformation(){}

      explicit IfcDocumentInformation() = default;

      explicit IfcDocumentInformation(const IfcIdentifier& _Identification, const IfcLabel& _Name)
         : IfcExternalInformation(), Identification(_Identification), Name(_Name) {}

      virtual std::string className() const { return "IfcDocumentInformation"; }

      boost::optional<IfcIdentifier> Identification; // required parameter
      boost::optional<IfcLabel> Name; // required parameter
      boost::optional<IfcText> Description; // optional parameter
      boost::optional<IfcURIReference> Location; // optional parameter
      boost::optional<IfcText> Purpose; // optional parameter
      boost::optional<IfcText> IntendedUse; // optional parameter
      boost::optional<IfcText> Scope; // optional parameter
      boost::optional<IfcLabel> Revision; // optional parameter
      boost::optional<IfcActorSelect> DocumentOwner; // optional parameter
      std::vector< boost::optional<IfcActorSelect> > Editors; // optional parameter
      boost::optional<IfcDateTime> CreationTime; // optional parameter
      boost::optional<IfcDateTime> LastRevisionTime; // optional parameter
      boost::optional<IfcIdentifier> ElectronicFormat; // optional parameter
      boost::optional<IfcDate> ValidFrom; // optional parameter
      boost::optional<IfcDate> ValidUntil; // optional parameter
      boost::optional<IfcDocumentConfidentialityEnum> Confidentiality; // optional parameter
      boost::optional<IfcDocumentStatusEnum> Status; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Identification);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(Location);
         w.writeAttributeValue(Purpose);
         w.writeAttributeValue(IntendedUse);
         w.writeAttributeValue(Scope);
         w.writeAttributeValue(Revision);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(DocumentOwner);
         w.writeAttributeSelect<IfcActorSelectWriterVisitor>(Editors);
         w.writeAttributeValue(CreationTime);
         w.writeAttributeValue(LastRevisionTime);
         w.writeAttributeValue(ElectronicFormat);
         w.writeAttributeValue(ValidFrom);
         w.writeAttributeValue(ValidUntil);
         w.writeAttributeValue(IfcDocumentConfidentialityEnumStringMap, Confidentiality);
         w.writeAttributeValue(IfcDocumentStatusEnumStringMap, Status);
         w.endEntity();
      }

   };

} // namespace ifc4

