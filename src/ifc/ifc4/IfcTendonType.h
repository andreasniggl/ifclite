// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcReinforcingElementType.h"

namespace ifc4
{
   class IfcTendonType : public IfcReinforcingElementType
   {
   public:
      virtual ~IfcTendonType(){}

      explicit IfcTendonType() = default;

      explicit IfcTendonType(const IfcGloballyUniqueId& _GlobalId, const IfcTendonTypeEnum& _PredefinedType)
         : IfcReinforcingElementType(_GlobalId), PredefinedType(_PredefinedType) {}

      virtual std::string className() const { return "IfcTendonType"; }

      boost::optional<IfcTendonTypeEnum> PredefinedType; // required parameter
      boost::optional<IfcPositiveLengthMeasure> NominalDiameter; // optional parameter
      boost::optional<IfcAreaMeasure> CrossSectionArea; // optional parameter
      boost::optional<IfcPositiveLengthMeasure> SheathDiameter; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ApplicableOccurrence);
         w.writeAttributeInstance(HasPropertySets);
         w.writeAttributeInstance(RepresentationMaps);
         w.writeAttributeValue(Tag);
         w.writeAttributeValue(ElementType);
         w.writeAttributeValue(IfcTendonTypeEnumStringMap, PredefinedType);
         w.writeAttributeValue(NominalDiameter);
         w.writeAttributeValue(CrossSectionArea);
         w.writeAttributeValue(SheathDiameter);
         w.endEntity();
      }

   };

} // namespace ifc4

