// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcLightSourcePositional.h"
#include "IfcDirection.h"

namespace ifc4
{
   class IfcLightSourceSpot : public IfcLightSourcePositional
   {
   public:
      virtual ~IfcLightSourceSpot(){}

      explicit IfcLightSourceSpot() = default;

      explicit IfcLightSourceSpot(IfcColourRgb* _LightColour, IfcCartesianPoint* _Position, const IfcPositiveLengthMeasure& _Radius, const IfcReal& _ConstantAttenuation, const IfcReal& _DistanceAttenuation, const IfcReal& _QuadricAttenuation, IfcDirection* _Orientation, const IfcPositivePlaneAngleMeasure& _SpreadAngle, const IfcPositivePlaneAngleMeasure& _BeamWidthAngle)
         : IfcLightSourcePositional(_LightColour, _Position, _Radius, _ConstantAttenuation, _DistanceAttenuation, _QuadricAttenuation), Orientation(_Orientation), SpreadAngle(_SpreadAngle), BeamWidthAngle(_BeamWidthAngle) {}

      virtual std::string className() const { return "IfcLightSourceSpot"; }

      IfcDirection* Orientation; // required parameter
      boost::optional<IfcReal> ConcentrationExponent; // optional parameter
      boost::optional<IfcPositivePlaneAngleMeasure> SpreadAngle; // required parameter
      boost::optional<IfcPositivePlaneAngleMeasure> BeamWidthAngle; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeInstance(LightColour);
         w.writeAttributeValue(AmbientIntensity);
         w.writeAttributeValue(Intensity);
         w.writeAttributeInstance(Position);
         w.writeAttributeValue(Radius);
         w.writeAttributeValue(ConstantAttenuation);
         w.writeAttributeValue(DistanceAttenuation);
         w.writeAttributeValue(QuadricAttenuation);
         w.writeAttributeInstance(Orientation);
         w.writeAttributeValue(ConcentrationExponent);
         w.writeAttributeValue(SpreadAngle);
         w.writeAttributeValue(BeamWidthAngle);
         w.endEntity();
      }

   };

} // namespace ifc4

