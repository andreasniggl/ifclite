// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcTimeSeries.h"
#include "IfcIrregularTimeSeriesValue.h"

namespace ifc4
{
   class IfcIrregularTimeSeries : public IfcTimeSeries
   {
   public:
      virtual ~IfcIrregularTimeSeries(){}

      explicit IfcIrregularTimeSeries() = default;

      explicit IfcIrregularTimeSeries(const IfcLabel& _Name, const IfcDateTime& _StartTime, const IfcDateTime& _EndTime, const IfcTimeSeriesDataTypeEnum& _TimeSeriesDataType, const IfcDataOriginEnum& _DataOrigin, const std::vector<IfcIrregularTimeSeriesValue*>& _Values)
         : IfcTimeSeries(_Name, _StartTime, _EndTime, _TimeSeriesDataType, _DataOrigin), Values(_Values) {}

      virtual std::string className() const { return "IfcIrregularTimeSeries"; }

      std::vector<IfcIrregularTimeSeriesValue*> Values; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(StartTime);
         w.writeAttributeValue(EndTime);
         w.writeAttributeValue(IfcTimeSeriesDataTypeEnumStringMap, TimeSeriesDataType);
         w.writeAttributeValue(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValue(UserDefinedDataOrigin);
         w.writeAttributeSelect<IfcUnitWriterVisitor>(Unit);
         w.writeAttributeInstance(Values);
         w.endEntity();
      }

   };

} // namespace ifc4

