// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcControl.h"
#include "IfcPerson.h"

namespace ifc4
{
   class IfcWorkControl : public IfcControl
   {
   public:
      virtual ~IfcWorkControl(){}

      explicit IfcWorkControl() = default;

      explicit IfcWorkControl(const IfcGloballyUniqueId& _GlobalId, const IfcDateTime& _CreationDate, const IfcDateTime& _StartTime)
         : IfcControl(_GlobalId), CreationDate(_CreationDate), StartTime(_StartTime) {}

      virtual std::string className() const { return "IfcWorkControl"; }

      boost::optional<IfcDateTime> CreationDate; // required parameter
      std::vector<IfcPerson*> Creators; // optional parameter
      boost::optional<IfcLabel> Purpose; // optional parameter
      boost::optional<IfcDuration> Duration; // optional parameter
      boost::optional<IfcDuration> TotalFloat; // optional parameter
      boost::optional<IfcDateTime> StartTime; // required parameter
      boost::optional<IfcDateTime> FinishTime; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ObjectType);
         w.writeAttributeValue(Identification);
         w.writeAttributeValue(CreationDate);
         w.writeAttributeInstance(Creators);
         w.writeAttributeValue(Purpose);
         w.writeAttributeValue(Duration);
         w.writeAttributeValue(TotalFloat);
         w.writeAttributeValue(StartTime);
         w.writeAttributeValue(FinishTime);
         w.endEntity();
      }

   };

} // namespace ifc4

