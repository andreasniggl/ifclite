// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcTypeProduct.h"

namespace ifc4
{
   class IfcWindowStyle : public IfcTypeProduct
   {
   public:
      virtual ~IfcWindowStyle(){}

      explicit IfcWindowStyle() = default;

      explicit IfcWindowStyle(const IfcGloballyUniqueId& _GlobalId, const IfcWindowStyleConstructionEnum& _ConstructionType, const IfcWindowStyleOperationEnum& _OperationType, const IfcBoolean& _ParameterTakesPrecedence, const IfcBoolean& _Sizeable)
         : IfcTypeProduct(_GlobalId), ConstructionType(_ConstructionType), OperationType(_OperationType), ParameterTakesPrecedence(_ParameterTakesPrecedence), Sizeable(_Sizeable) {}

      virtual std::string className() const { return "IfcWindowStyle"; }

      boost::optional<IfcWindowStyleConstructionEnum> ConstructionType; // required parameter
      boost::optional<IfcWindowStyleOperationEnum> OperationType; // required parameter
      boost::optional<IfcBoolean> ParameterTakesPrecedence; // required parameter
      boost::optional<IfcBoolean> Sizeable; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeValue(ApplicableOccurrence);
         w.writeAttributeInstance(HasPropertySets);
         w.writeAttributeInstance(RepresentationMaps);
         w.writeAttributeValue(Tag);
         w.writeAttributeValue(IfcWindowStyleConstructionEnumStringMap, ConstructionType);
         w.writeAttributeValue(IfcWindowStyleOperationEnumStringMap, OperationType);
         w.writeAttributeValue(ParameterTakesPrecedence);
         w.writeAttributeValue(Sizeable);
         w.endEntity();
      }

   };

} // namespace ifc4

