// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcSurfaceStyleShading.h"
#include "IfcColourOrFactor.h"
#include "IfcColourOrFactor.h"
#include "IfcColourOrFactor.h"
#include "IfcColourOrFactor.h"
#include "IfcColourOrFactor.h"
#include "IfcSpecularHighlightSelect.h"

namespace ifc4
{
   class IfcSurfaceStyleRendering : public IfcSurfaceStyleShading
   {
   public:
      virtual ~IfcSurfaceStyleRendering(){}

      explicit IfcSurfaceStyleRendering() = default;

      explicit IfcSurfaceStyleRendering(IfcColourRgb* _SurfaceColour, const IfcReflectanceMethodEnum& _ReflectanceMethod)
         : IfcSurfaceStyleShading(_SurfaceColour), ReflectanceMethod(_ReflectanceMethod) {}

      virtual std::string className() const { return "IfcSurfaceStyleRendering"; }

      boost::optional<IfcColourOrFactor> DiffuseColour; // optional parameter
      boost::optional<IfcColourOrFactor> TransmissionColour; // optional parameter
      boost::optional<IfcColourOrFactor> DiffuseTransmissionColour; // optional parameter
      boost::optional<IfcColourOrFactor> ReflectionColour; // optional parameter
      boost::optional<IfcColourOrFactor> SpecularColour; // optional parameter
      boost::optional<IfcSpecularHighlightSelect> SpecularHighlight; // optional parameter
      boost::optional<IfcReflectanceMethodEnum> ReflectanceMethod; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(SurfaceColour);
         w.writeAttributeValue(Transparency);
         w.writeAttributeSelect<IfcColourOrFactorWriterVisitor>(DiffuseColour);
         w.writeAttributeSelect<IfcColourOrFactorWriterVisitor>(TransmissionColour);
         w.writeAttributeSelect<IfcColourOrFactorWriterVisitor>(DiffuseTransmissionColour);
         w.writeAttributeSelect<IfcColourOrFactorWriterVisitor>(ReflectionColour);
         w.writeAttributeSelect<IfcColourOrFactorWriterVisitor>(SpecularColour);
         w.writeAttributeSelect<IfcSpecularHighlightSelectWriterVisitor>(SpecularHighlight);
         w.writeAttributeValue(IfcReflectanceMethodEnumStringMap, ReflectanceMethod);
         w.endEntity();
      }

   };

} // namespace ifc4

