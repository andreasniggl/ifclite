// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcBSplineCurveWithKnots.h"

namespace ifc4
{
   class IfcRationalBSplineCurveWithKnots : public IfcBSplineCurveWithKnots
   {
   public:
      virtual ~IfcRationalBSplineCurveWithKnots(){}

      explicit IfcRationalBSplineCurveWithKnots() = default;

      explicit IfcRationalBSplineCurveWithKnots(const IfcInteger& _Degree, const std::vector<IfcCartesianPoint*>& _ControlPointsList, const IfcBSplineCurveForm& _CurveForm, const IfcLogical& _ClosedCurve, const IfcLogical& _SelfIntersect, const std::vector<IfcInteger>& _KnotMultiplicities, const std::vector<IfcParameterValue>& _Knots, const IfcKnotType& _KnotSpec, const std::vector<IfcReal>& _WeightsData)
         : IfcBSplineCurveWithKnots(_Degree, _ControlPointsList, _CurveForm, _ClosedCurve, _SelfIntersect, _KnotMultiplicities, _Knots, _KnotSpec), WeightsData(_WeightsData) {}

      virtual std::string className() const { return "IfcRationalBSplineCurveWithKnots"; }

      std::vector<IfcReal> WeightsData; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Degree);
         w.writeAttributeInstance(ControlPointsList);
         w.writeAttributeValue(IfcBSplineCurveFormStringMap, CurveForm);
         w.writeAttributeValue(ClosedCurve);
         w.writeAttributeValue(SelfIntersect);
         w.writeAttributeValue(KnotMultiplicities);
         w.writeAttributeValue(Knots);
         w.writeAttributeValue(IfcKnotTypeStringMap, KnotSpec);
         w.writeAttributeValue(WeightsData);
         w.endEntity();
      }

   };

} // namespace ifc4

