// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcBoundedCurve.h"
#include "IfcCartesianPoint.h"

namespace ifc4
{
   class IfcBSplineCurve : public IfcBoundedCurve
   {
   public:
      virtual ~IfcBSplineCurve(){}

      explicit IfcBSplineCurve() = default;

      explicit IfcBSplineCurve(const IfcInteger& _Degree, const std::vector<IfcCartesianPoint*>& _ControlPointsList, const IfcBSplineCurveForm& _CurveForm, const IfcLogical& _ClosedCurve, const IfcLogical& _SelfIntersect)
         : IfcBoundedCurve(), Degree(_Degree), ControlPointsList(_ControlPointsList), CurveForm(_CurveForm), ClosedCurve(_ClosedCurve), SelfIntersect(_SelfIntersect) {}

      virtual std::string className() const { return "IfcBSplineCurve"; }

      boost::optional<IfcInteger> Degree; // required parameter
      std::vector<IfcCartesianPoint*> ControlPointsList; // required parameter
      boost::optional<IfcBSplineCurveForm> CurveForm; // required parameter
      boost::optional<IfcLogical> ClosedCurve; // required parameter
      boost::optional<IfcLogical> SelfIntersect; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Degree);
         w.writeAttributeInstance(ControlPointsList);
         w.writeAttributeValue(IfcBSplineCurveFormStringMap, CurveForm);
         w.writeAttributeValue(ClosedCurve);
         w.writeAttributeValue(SelfIntersect);
         w.endEntity();
      }

   };

} // namespace ifc4

