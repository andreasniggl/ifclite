// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcRelConnects.h"
#include "IfcElement.h"
#include "IfcElement.h"
#include "IfcConnectionGeometry.h"

namespace ifc4
{
   class IfcRelInterferesElements : public IfcRelConnects
   {
   public:
      virtual ~IfcRelInterferesElements(){}

      explicit IfcRelInterferesElements() = default;

      explicit IfcRelInterferesElements(const IfcGloballyUniqueId& _GlobalId, IfcElement* _RelatingElement, IfcElement* _RelatedElement, const bool& _ImpliedOrder)
         : IfcRelConnects(_GlobalId), RelatingElement(_RelatingElement), RelatedElement(_RelatedElement), ImpliedOrder(_ImpliedOrder) {}

      virtual std::string className() const { return "IfcRelInterferesElements"; }

      IfcElement* RelatingElement; // required parameter
      IfcElement* RelatedElement; // required parameter
      IfcConnectionGeometry* InterferenceGeometry; // optional parameter
      boost::optional<IfcIdentifier> InterferenceType; // optional parameter
      boost::optional<bool> ImpliedOrder; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(GlobalId);
         w.writeAttributeInstance(OwnerHistory);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(Description);
         w.writeAttributeInstance(RelatingElement);
         w.writeAttributeInstance(RelatedElement);
         w.writeAttributeInstance(InterferenceGeometry);
         w.writeAttributeValue(InterferenceType);
         w.writeAttributeValue(ImpliedOrder);
         w.endEntity();
      }

   };

} // namespace ifc4

