// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcTessellatedFaceSet.h"

namespace ifc4
{
   class IfcTriangulatedFaceSet : public IfcTessellatedFaceSet
   {
   public:
      virtual ~IfcTriangulatedFaceSet(){}

      explicit IfcTriangulatedFaceSet() = default;

      explicit IfcTriangulatedFaceSet(IfcCartesianPointList3D* _Coordinates, const std::vector< std::vector<IfcPositiveInteger> >& _CoordIndex)
         : IfcTessellatedFaceSet(_Coordinates), CoordIndex(_CoordIndex) {}

      virtual std::string className() const { return "IfcTriangulatedFaceSet"; }

      std::vector< std::vector<IfcParameterValue> > Normals; // optional parameter
      boost::optional<IfcBoolean> Closed; // optional parameter
      std::vector< std::vector<IfcPositiveInteger> > CoordIndex; // required parameter
      std::vector<IfcPositiveInteger> PnIndex; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeInstance(Coordinates);
         w.writeAttributeValue(Normals);
         w.writeAttributeValue(Closed);
         w.writeAttributeValue(CoordIndex);
         w.writeAttributeValue(PnIndex);
         w.endEntity();
      }

   };

} // namespace ifc4

