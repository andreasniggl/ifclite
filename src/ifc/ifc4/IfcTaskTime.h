// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcSchedulingTime.h"

namespace ifc4
{
   class IfcTaskTime : public IfcSchedulingTime
   {
   public:
      virtual ~IfcTaskTime(){}

      explicit IfcTaskTime() = default;

      virtual std::string className() const { return "IfcTaskTime"; }

      boost::optional<IfcTaskDurationEnum> DurationType; // optional parameter
      boost::optional<IfcDuration> ScheduleDuration; // optional parameter
      boost::optional<IfcDateTime> ScheduleStart; // optional parameter
      boost::optional<IfcDateTime> ScheduleFinish; // optional parameter
      boost::optional<IfcDateTime> EarlyStart; // optional parameter
      boost::optional<IfcDateTime> EarlyFinish; // optional parameter
      boost::optional<IfcDateTime> LateStart; // optional parameter
      boost::optional<IfcDateTime> LateFinish; // optional parameter
      boost::optional<IfcDuration> FreeFloat; // optional parameter
      boost::optional<IfcDuration> TotalFloat; // optional parameter
      boost::optional<IfcBoolean> IsCritical; // optional parameter
      boost::optional<IfcDateTime> StatusTime; // optional parameter
      boost::optional<IfcDuration> ActualDuration; // optional parameter
      boost::optional<IfcDateTime> ActualStart; // optional parameter
      boost::optional<IfcDateTime> ActualFinish; // optional parameter
      boost::optional<IfcDuration> RemainingTime; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> Completion; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValue(UserDefinedDataOrigin);
         w.writeAttributeValue(IfcTaskDurationEnumStringMap, DurationType);
         w.writeAttributeValue(ScheduleDuration);
         w.writeAttributeValue(ScheduleStart);
         w.writeAttributeValue(ScheduleFinish);
         w.writeAttributeValue(EarlyStart);
         w.writeAttributeValue(EarlyFinish);
         w.writeAttributeValue(LateStart);
         w.writeAttributeValue(LateFinish);
         w.writeAttributeValue(FreeFloat);
         w.writeAttributeValue(TotalFloat);
         w.writeAttributeValue(IsCritical);
         w.writeAttributeValue(StatusTime);
         w.writeAttributeValue(ActualDuration);
         w.writeAttributeValue(ActualStart);
         w.writeAttributeValue(ActualFinish);
         w.writeAttributeValue(RemainingTime);
         w.writeAttributeValue(Completion);
         w.endEntity();
      }

   };

} // namespace ifc4

