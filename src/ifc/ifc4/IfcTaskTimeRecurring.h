// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcTaskTime.h"
#include "IfcRecurrencePattern.h"

namespace ifc4
{
   class IfcTaskTimeRecurring : public IfcTaskTime
   {
   public:
      virtual ~IfcTaskTimeRecurring(){}

      explicit IfcTaskTimeRecurring() = default;

      explicit IfcTaskTimeRecurring(IfcRecurrencePattern* _Recurrence)
         : IfcTaskTime(), Recurrence(_Recurrence) {}

      virtual std::string className() const { return "IfcTaskTimeRecurring"; }

      IfcRecurrencePattern* Recurrence; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValue(UserDefinedDataOrigin);
         w.writeAttributeValue(IfcTaskDurationEnumStringMap, DurationType);
         w.writeAttributeValue(ScheduleDuration);
         w.writeAttributeValue(ScheduleStart);
         w.writeAttributeValue(ScheduleFinish);
         w.writeAttributeValue(EarlyStart);
         w.writeAttributeValue(EarlyFinish);
         w.writeAttributeValue(LateStart);
         w.writeAttributeValue(LateFinish);
         w.writeAttributeValue(FreeFloat);
         w.writeAttributeValue(TotalFloat);
         w.writeAttributeValue(IsCritical);
         w.writeAttributeValue(StatusTime);
         w.writeAttributeValue(ActualDuration);
         w.writeAttributeValue(ActualStart);
         w.writeAttributeValue(ActualFinish);
         w.writeAttributeValue(RemainingTime);
         w.writeAttributeValue(Completion);
         w.writeAttributeInstance(Recurrence);
         w.endEntity();
      }

   };

} // namespace ifc4

