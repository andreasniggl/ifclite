// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcSchedulingTime.h"

namespace ifc4
{
   class IfcResourceTime : public IfcSchedulingTime
   {
   public:
      virtual ~IfcResourceTime(){}

      explicit IfcResourceTime() = default;

      virtual std::string className() const { return "IfcResourceTime"; }

      boost::optional<IfcDuration> ScheduleWork; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> ScheduleUsage; // optional parameter
      boost::optional<IfcDateTime> ScheduleStart; // optional parameter
      boost::optional<IfcDateTime> ScheduleFinish; // optional parameter
      boost::optional<IfcLabel> ScheduleContour; // optional parameter
      boost::optional<IfcDuration> LevelingDelay; // optional parameter
      boost::optional<IfcBoolean> IsOverAllocated; // optional parameter
      boost::optional<IfcDateTime> StatusTime; // optional parameter
      boost::optional<IfcDuration> ActualWork; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> ActualUsage; // optional parameter
      boost::optional<IfcDateTime> ActualStart; // optional parameter
      boost::optional<IfcDateTime> ActualFinish; // optional parameter
      boost::optional<IfcDuration> RemainingWork; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> RemainingUsage; // optional parameter
      boost::optional<IfcPositiveRatioMeasure> Completion; // optional parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(Name);
         w.writeAttributeValue(IfcDataOriginEnumStringMap, DataOrigin);
         w.writeAttributeValue(UserDefinedDataOrigin);
         w.writeAttributeValue(ScheduleWork);
         w.writeAttributeValue(ScheduleUsage);
         w.writeAttributeValue(ScheduleStart);
         w.writeAttributeValue(ScheduleFinish);
         w.writeAttributeValue(ScheduleContour);
         w.writeAttributeValue(LevelingDelay);
         w.writeAttributeValue(IsOverAllocated);
         w.writeAttributeValue(StatusTime);
         w.writeAttributeValue(ActualWork);
         w.writeAttributeValue(ActualUsage);
         w.writeAttributeValue(ActualStart);
         w.writeAttributeValue(ActualFinish);
         w.writeAttributeValue(RemainingWork);
         w.writeAttributeValue(RemainingUsage);
         w.writeAttributeValue(Completion);
         w.endEntity();
      }

   };

} // namespace ifc4

