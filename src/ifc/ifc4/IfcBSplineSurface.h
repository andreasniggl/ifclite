// Automatically generated by ifclite express parser from ifc4 express file - do not modify

#pragma once

#include "IfcTypeDefinitions.h"
#include "IfcBoundedSurface.h"
#include "IfcCartesianPoint.h"

namespace ifc4
{
   class IfcBSplineSurface : public IfcBoundedSurface
   {
   public:
      virtual ~IfcBSplineSurface(){}

      explicit IfcBSplineSurface() = default;

      explicit IfcBSplineSurface(const IfcInteger& _UDegree, const IfcInteger& _VDegree, const std::vector< std::vector<IfcCartesianPoint*> >& _ControlPointsList, const IfcBSplineSurfaceForm& _SurfaceForm, const IfcLogical& _UClosed, const IfcLogical& _VClosed, const IfcLogical& _SelfIntersect)
         : IfcBoundedSurface(), UDegree(_UDegree), VDegree(_VDegree), ControlPointsList(_ControlPointsList), SurfaceForm(_SurfaceForm), UClosed(_UClosed), VClosed(_VClosed), SelfIntersect(_SelfIntersect) {}

      virtual std::string className() const { return "IfcBSplineSurface"; }

      boost::optional<IfcInteger> UDegree; // required parameter
      boost::optional<IfcInteger> VDegree; // required parameter
      std::vector< std::vector<IfcCartesianPoint*> > ControlPointsList; // required parameter
      boost::optional<IfcBSplineSurfaceForm> SurfaceForm; // required parameter
      boost::optional<IfcLogical> UClosed; // required parameter
      boost::optional<IfcLogical> VClosed; // required parameter
      boost::optional<IfcLogical> SelfIntersect; // required parameter

   protected:
      virtual void serialize(ifc::StepWriter& w) const
      {
         w.beginEntity(this);
         w.writeAttributeValue(UDegree);
         w.writeAttributeValue(VDegree);
         w.writeAttributeInstance(ControlPointsList);
         w.writeAttributeValue(IfcBSplineSurfaceFormStringMap, SurfaceForm);
         w.writeAttributeValue(UClosed);
         w.writeAttributeValue(VClosed);
         w.writeAttributeValue(SelfIntersect);
         w.endEntity();
      }

   };

} // namespace ifc4

